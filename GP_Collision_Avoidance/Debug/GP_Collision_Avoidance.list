
GP_Collision_Avoidance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080016f0  080016f0  000116f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001704  08001704  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001704  08001704  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001704  08001704  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001704  08001704  00011704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001708  08001708  00011708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800170c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000008  08001710  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08001710  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002405  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009cd  00000000  00000000  00022432  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000300  00000000  00000000  00022e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000278  00000000  00000000  00023100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000022b6  00000000  00000000  00023378  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002e08  00000000  00000000  0002562e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00007732  00000000  00000000  00028436  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002fb68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009b0  00000000  00000000  0002fbe4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	080016d8 	.word	0x080016d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	080016d8 	.word	0x080016d8

08000170 <Get_Vehicles_Situation>:
 /*
   * The proposed FCW model considered four situations:
   * the front vehicle traveled at a constant speed, acceleration, normal deceleration, and emergency deceleration.
   */
 void Get_Vehicles_Situation()
 {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	 // at point one
	 APP_FCA_Get_Actual_Speed_deceleration();
 8000174:	f000 f9bc 	bl	80004f0 <APP_FCA_Get_Actual_Speed_deceleration>
	 HAL_US_GET_relativeAndFollowing_volcity(&v_rel, &V_h, &Vf_temp);
 8000178:	4a1e      	ldr	r2, [pc, #120]	; (80001f4 <Get_Vehicles_Situation+0x84>)
 800017a:	491f      	ldr	r1, [pc, #124]	; (80001f8 <Get_Vehicles_Situation+0x88>)
 800017c:	481f      	ldr	r0, [pc, #124]	; (80001fc <Get_Vehicles_Situation+0x8c>)
 800017e:	f000 fabf 	bl	8000700 <HAL_US_GET_relativeAndFollowing_volcity>
	// MCAL_TIMER_Start_Stop_Calculate_Time(TIMER4, start);

	 // at point two
	 APP_FCA_Get_Actual_Speed_deceleration();
 8000182:	f000 f9b5 	bl	80004f0 <APP_FCA_Get_Actual_Speed_deceleration>
	 HAL_US_GET_relativeAndFollowing_volcity(&v_rel, &V_h, &V_F);
 8000186:	4a1e      	ldr	r2, [pc, #120]	; (8000200 <Get_Vehicles_Situation+0x90>)
 8000188:	491b      	ldr	r1, [pc, #108]	; (80001f8 <Get_Vehicles_Situation+0x88>)
 800018a:	481c      	ldr	r0, [pc, #112]	; (80001fc <Get_Vehicles_Situation+0x8c>)
 800018c:	f000 fab8 	bl	8000700 <HAL_US_GET_relativeAndFollowing_volcity>
	 V_time = MCAL_TIMER_Get_Time(TIMER3);
 8000190:	481c      	ldr	r0, [pc, #112]	; (8000204 <Get_Vehicles_Situation+0x94>)
 8000192:	f000 ff8d 	bl	80010b0 <MCAL_TIMER_Get_Time>
 8000196:	4602      	mov	r2, r0
 8000198:	4b1b      	ldr	r3, [pc, #108]	; (8000208 <Get_Vehicles_Situation+0x98>)
 800019a:	601a      	str	r2, [r3, #0]
	// MCAL_TIMER_Start_Stop_Calculate_Time(TIMER4, stop);

	 // determine the situation
     if      (V_F >= Vf_temp)
 800019c:	4b18      	ldr	r3, [pc, #96]	; (8000200 <Get_Vehicles_Situation+0x90>)
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	4b14      	ldr	r3, [pc, #80]	; (80001f4 <Get_Vehicles_Situation+0x84>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	429a      	cmp	r2, r3
 80001a6:	d303      	bcc.n	80001b0 <Get_Vehicles_Situation+0x40>
    	 {
    	 	 situation = Vehicle_situation_constant_Speed_Acceleration;
 80001a8:	4b18      	ldr	r3, [pc, #96]	; (800020c <Get_Vehicles_Situation+0x9c>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]
		 	 situation = Vehicle_situation_normal_deceleration;
		 	 a_f = ((( Vf_temp - V_F ) * 1000000)/ V_time);
		 }
	 else if (V_F == 0 ) 	situation = Vehicle_situation_emergency_deceleration;

 }
 80001ae:	e01e      	b.n	80001ee <Get_Vehicles_Situation+0x7e>
	 else if (V_F < Vf_temp)
 80001b0:	4b13      	ldr	r3, [pc, #76]	; (8000200 <Get_Vehicles_Situation+0x90>)
 80001b2:	681a      	ldr	r2, [r3, #0]
 80001b4:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <Get_Vehicles_Situation+0x84>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d211      	bcs.n	80001e0 <Get_Vehicles_Situation+0x70>
		 	 situation = Vehicle_situation_normal_deceleration;
 80001bc:	4b13      	ldr	r3, [pc, #76]	; (800020c <Get_Vehicles_Situation+0x9c>)
 80001be:	2201      	movs	r2, #1
 80001c0:	701a      	strb	r2, [r3, #0]
		 	 a_f = ((( Vf_temp - V_F ) * 1000000)/ V_time);
 80001c2:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <Get_Vehicles_Situation+0x84>)
 80001c4:	681a      	ldr	r2, [r3, #0]
 80001c6:	4b0e      	ldr	r3, [pc, #56]	; (8000200 <Get_Vehicles_Situation+0x90>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	1ad3      	subs	r3, r2, r3
 80001cc:	4a10      	ldr	r2, [pc, #64]	; (8000210 <Get_Vehicles_Situation+0xa0>)
 80001ce:	fb02 f203 	mul.w	r2, r2, r3
 80001d2:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <Get_Vehicles_Situation+0x98>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001da:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <Get_Vehicles_Situation+0xa4>)
 80001dc:	6013      	str	r3, [r2, #0]
 }
 80001de:	e006      	b.n	80001ee <Get_Vehicles_Situation+0x7e>
	 else if (V_F == 0 ) 	situation = Vehicle_situation_emergency_deceleration;
 80001e0:	4b07      	ldr	r3, [pc, #28]	; (8000200 <Get_Vehicles_Situation+0x90>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d102      	bne.n	80001ee <Get_Vehicles_Situation+0x7e>
 80001e8:	4b08      	ldr	r3, [pc, #32]	; (800020c <Get_Vehicles_Situation+0x9c>)
 80001ea:	2202      	movs	r2, #2
 80001ec:	701a      	strb	r2, [r3, #0]
 }
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	20000030 	.word	0x20000030
 80001f8:	20000048 	.word	0x20000048
 80001fc:	20000044 	.word	0x20000044
 8000200:	2000003c 	.word	0x2000003c
 8000204:	40000400 	.word	0x40000400
 8000208:	20000038 	.word	0x20000038
 800020c:	20000042 	.word	0x20000042
 8000210:	000f4240 	.word	0x000f4240
 8000214:	20000034 	.word	0x20000034

08000218 <APP_FCA_Init>:
 * =======================================================================================
 * 							APIs Supported by "Collision Avoidance DRIVER"
 * =======================================================================================
 */
 void APP_FCA_Init(USART_TypeDef* USARTx)
 {
 8000218:	b580      	push	{r7, lr}
 800021a:	b088      	sub	sp, #32
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	 // Configure USART which used to get Speed and Acceleration
		UART_PinConfig_t uart_cfg;
		uart_cfg.BaudRate = UART_BaudRate_115200;
 8000220:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000224:	613b      	str	r3, [r7, #16]
		uart_cfg.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000226:	2300      	movs	r3, #0
 8000228:	75fb      	strb	r3, [r7, #23]
		uart_cfg.IRQ_Enable = UART_IRQ_Enable_NONE;
 800022a:	2300      	movs	r3, #0
 800022c:	763b      	strb	r3, [r7, #24]
		uart_cfg.Mode = UART_Mode_TX_RX;
 800022e:	230c      	movs	r3, #12
 8000230:	733b      	strb	r3, [r7, #12]
		uart_cfg.Parity = UART_Parity__NONE;
 8000232:	2300      	movs	r3, #0
 8000234:	757b      	strb	r3, [r7, #21]
		uart_cfg.Payload_Length = UART_Payload_Length_8B ;
 8000236:	2300      	movs	r3, #0
 8000238:	753b      	strb	r3, [r7, #20]
		uart_cfg.StopBits = UART_StopBits__1 ;
 800023a:	2300      	movs	r3, #0
 800023c:	75bb      	strb	r3, [r7, #22]
		MCAL_UART_Init(USARTx, &uart_cfg);
 800023e:	f107 030c 	add.w	r3, r7, #12
 8000242:	4619      	mov	r1, r3
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f000 ffaf 	bl	80011a8 <MCAL_UART_Init>
		MCAL_UART_GPIO_Set_Pins(USARTx);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f001 f884 	bl	8001358 <MCAL_UART_GPIO_Set_Pins>

		 // Configure Pins of Warning
		GPIO_PinConfig_t PinCfg ;
		PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000250:	230c      	movs	r3, #12
 8000252:	723b      	strb	r3, [r7, #8]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000254:	2304      	movs	r3, #4
 8000256:	727b      	strb	r3, [r7, #9]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 8000258:	2303      	movs	r3, #3
 800025a:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800025c:	f107 0308 	add.w	r3, r7, #8
 8000260:	4619      	mov	r1, r3
 8000262:	480e      	ldr	r0, [pc, #56]	; (800029c <APP_FCA_Init+0x84>)
 8000264:	f001 f96e 	bl	8001544 <MCAL_GPIO_Init>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	210c      	movs	r1, #12
 800026c:	480b      	ldr	r0, [pc, #44]	; (800029c <APP_FCA_Init+0x84>)
 800026e:	f001 f9eb 	bl	8001648 <MCAL_GPIO_WritePin>

		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000272:	230b      	movs	r3, #11
 8000274:	723b      	strb	r3, [r7, #8]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000276:	2304      	movs	r3, #4
 8000278:	727b      	strb	r3, [r7, #9]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 800027a:	2303      	movs	r3, #3
 800027c:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 800027e:	f107 0308 	add.w	r3, r7, #8
 8000282:	4619      	mov	r1, r3
 8000284:	4805      	ldr	r0, [pc, #20]	; (800029c <APP_FCA_Init+0x84>)
 8000286:	f001 f95d 	bl	8001544 <MCAL_GPIO_Init>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	210b      	movs	r1, #11
 800028e:	4803      	ldr	r0, [pc, #12]	; (800029c <APP_FCA_Init+0x84>)
 8000290:	f001 f9da 	bl	8001648 <MCAL_GPIO_WritePin>

 }
 8000294:	bf00      	nop
 8000296:	3720      	adds	r7, #32
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40010800 	.word	0x40010800

080002a0 <APP_FCA_Detecte_Collision_Status>:
  * @retval 		-none
  * Note			-none
  */
void APP_FCA_Detecte_Collision_Status()

{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	// Get Threshold
	APP_FCA_Calculte_Threshold();
 80002a4:	f000 f86a 	bl	800037c <APP_FCA_Calculte_Threshold>

	// Get Actual Distance
	Hal_US_GET_distance(&Actual_distance);
 80002a8:	482f      	ldr	r0, [pc, #188]	; (8000368 <APP_FCA_Detecte_Collision_Status+0xc8>)
 80002aa:	f000 fa0f 	bl	80006cc <Hal_US_GET_distance>

	if((Actual_distance < (threshold/3)) && (V_h != 0))
 80002ae:	4b2e      	ldr	r3, [pc, #184]	; (8000368 <APP_FCA_Detecte_Collision_Status+0xc8>)
 80002b0:	881b      	ldrh	r3, [r3, #0]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4b2d      	ldr	r3, [pc, #180]	; (800036c <APP_FCA_Detecte_Collision_Status+0xcc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a2d      	ldr	r2, [pc, #180]	; (8000370 <APP_FCA_Detecte_Collision_Status+0xd0>)
 80002ba:	fba2 2303 	umull	r2, r3, r2, r3
 80002be:	085b      	lsrs	r3, r3, #1
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d20a      	bcs.n	80002da <APP_FCA_Detecte_Collision_Status+0x3a>
 80002c4:	4b2b      	ldr	r3, [pc, #172]	; (8000374 <APP_FCA_Detecte_Collision_Status+0xd4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d006      	beq.n	80002da <APP_FCA_Detecte_Collision_Status+0x3a>
	{
		// Warning and Emergency brake (SW interrupt)
		APP_FCA_Set_Warning(Warning_ON);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f000 f943 	bl	8000558 <APP_FCA_Set_Warning>
		APP_FCA_Set_Emergency_Brake(EMB_ON);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 f964 	bl	80005a0 <APP_FCA_Set_Emergency_Brake>
 80002d8:	e043      	b.n	8000362 <APP_FCA_Detecte_Collision_Status+0xc2>
	}
	else if((Actual_distance <= (3*(threshold/3))/2)&& (V_h != 0))
 80002da:	4b23      	ldr	r3, [pc, #140]	; (8000368 <APP_FCA_Detecte_Collision_Status+0xc8>)
 80002dc:	881b      	ldrh	r3, [r3, #0]
 80002de:	4619      	mov	r1, r3
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <APP_FCA_Detecte_Collision_Status+0xcc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a22      	ldr	r2, [pc, #136]	; (8000370 <APP_FCA_Detecte_Collision_Status+0xd0>)
 80002e6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ea:	085a      	lsrs	r2, r3, #1
 80002ec:	4613      	mov	r3, r2
 80002ee:	005b      	lsls	r3, r3, #1
 80002f0:	4413      	add	r3, r2
 80002f2:	085b      	lsrs	r3, r3, #1
 80002f4:	4299      	cmp	r1, r3
 80002f6:	d80d      	bhi.n	8000314 <APP_FCA_Detecte_Collision_Status+0x74>
 80002f8:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <APP_FCA_Detecte_Collision_Status+0xd4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d009      	beq.n	8000314 <APP_FCA_Detecte_Collision_Status+0x74>
	{
		// Collision Warning and ACC
		APP_FCA_Set_Warning(Warning_ON);
 8000300:	2001      	movs	r0, #1
 8000302:	f000 f929 	bl	8000558 <APP_FCA_Set_Warning>
		APP_FCA_Set_ACC(ACC_ON);
 8000306:	2001      	movs	r0, #1
 8000308:	f000 f940 	bl	800058c <APP_FCA_Set_ACC>
		APP_FCA_Set_Emergency_Brake(EMB_OFF);
 800030c:	2000      	movs	r0, #0
 800030e:	f000 f947 	bl	80005a0 <APP_FCA_Set_Emergency_Brake>
 8000312:	e026      	b.n	8000362 <APP_FCA_Detecte_Collision_Status+0xc2>
	}
	else if((Actual_distance <= 2*(threshold/3)) && (V_h != 0) && (Actual_distance < G_threshold))
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <APP_FCA_Detecte_Collision_Status+0xc8>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	4619      	mov	r1, r3
 800031a:	4b14      	ldr	r3, [pc, #80]	; (800036c <APP_FCA_Detecte_Collision_Status+0xcc>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a14      	ldr	r2, [pc, #80]	; (8000370 <APP_FCA_Detecte_Collision_Status+0xd0>)
 8000320:	fba2 2303 	umull	r2, r3, r2, r3
 8000324:	085b      	lsrs	r3, r3, #1
 8000326:	005b      	lsls	r3, r3, #1
 8000328:	4299      	cmp	r1, r3
 800032a:	d811      	bhi.n	8000350 <APP_FCA_Detecte_Collision_Status+0xb0>
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <APP_FCA_Detecte_Collision_Status+0xd4>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d00d      	beq.n	8000350 <APP_FCA_Detecte_Collision_Status+0xb0>
 8000334:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <APP_FCA_Detecte_Collision_Status+0xc8>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	461a      	mov	r2, r3
 800033a:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <APP_FCA_Detecte_Collision_Status+0xd8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	429a      	cmp	r2, r3
 8000340:	d206      	bcs.n	8000350 <APP_FCA_Detecte_Collision_Status+0xb0>
	{
		// Collision Warning only
		APP_FCA_Set_Warning(Warning_ON);
 8000342:	2001      	movs	r0, #1
 8000344:	f000 f908 	bl	8000558 <APP_FCA_Set_Warning>
		APP_FCA_Set_Emergency_Brake(EMB_OFF);
 8000348:	2000      	movs	r0, #0
 800034a:	f000 f929 	bl	80005a0 <APP_FCA_Set_Emergency_Brake>
 800034e:	e008      	b.n	8000362 <APP_FCA_Detecte_Collision_Status+0xc2>
	}
	else
	{
		// Warning , ACC and Emergency brake  OFF
		APP_FCA_Set_Warning(Warning_OFF);
 8000350:	2000      	movs	r0, #0
 8000352:	f000 f901 	bl	8000558 <APP_FCA_Set_Warning>
		APP_FCA_Set_ACC(ACC_OFF);
 8000356:	2000      	movs	r0, #0
 8000358:	f000 f918 	bl	800058c <APP_FCA_Set_ACC>
		APP_FCA_Set_Emergency_Brake(EMB_OFF);
 800035c:	2000      	movs	r0, #0
 800035e:	f000 f91f 	bl	80005a0 <APP_FCA_Set_Emergency_Brake>
	}
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000040 	.word	0x20000040
 800036c:	20000028 	.word	0x20000028
 8000370:	aaaaaaab 	.word	0xaaaaaaab
 8000374:	20000048 	.word	0x20000048
 8000378:	20000000 	.word	0x20000000

0800037c <APP_FCA_Calculte_Threshold>:
 * @param [in] 		- threshold: Pointer to the Place which Critical distance Store in
 * @retval 			-none
 * Note				-none
 */
void APP_FCA_Calculte_Threshold()
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	// Get the Situation of Vehicles
	Get_Vehicles_Situation();
 8000380:	f7ff fef6 	bl	8000170 <Get_Vehicles_Situation>

	if(situation == Vehicle_situation_constant_Speed_Acceleration)
 8000384:	4b51      	ldr	r3, [pc, #324]	; (80004cc <APP_FCA_Calculte_Threshold+0x150>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d12b      	bne.n	80003e4 <APP_FCA_Calculte_Threshold+0x68>
	{
		threshold = ((v_rel *(tbc +(tbr/2)+thum))/1000)+(((V_h*V_h)-(V_F*V_F))/(2*a_h))-((V_F*v_rel)/a_h)+ D0;
 800038c:	4b50      	ldr	r3, [pc, #320]	; (80004d0 <APP_FCA_Calculte_Threshold+0x154>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f240 6227 	movw	r2, #1575	; 0x627
 8000394:	fb02 f303 	mul.w	r3, r2, r3
 8000398:	4a4e      	ldr	r2, [pc, #312]	; (80004d4 <APP_FCA_Calculte_Threshold+0x158>)
 800039a:	fba2 2303 	umull	r2, r3, r2, r3
 800039e:	099a      	lsrs	r2, r3, #6
 80003a0:	4b4d      	ldr	r3, [pc, #308]	; (80004d8 <APP_FCA_Calculte_Threshold+0x15c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	494c      	ldr	r1, [pc, #304]	; (80004d8 <APP_FCA_Calculte_Threshold+0x15c>)
 80003a6:	6809      	ldr	r1, [r1, #0]
 80003a8:	fb01 f103 	mul.w	r1, r1, r3
 80003ac:	4b4b      	ldr	r3, [pc, #300]	; (80004dc <APP_FCA_Calculte_Threshold+0x160>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	484a      	ldr	r0, [pc, #296]	; (80004dc <APP_FCA_Calculte_Threshold+0x160>)
 80003b2:	6800      	ldr	r0, [r0, #0]
 80003b4:	fb00 f303 	mul.w	r3, r0, r3
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	4b49      	ldr	r3, [pc, #292]	; (80004e0 <APP_FCA_Calculte_Threshold+0x164>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80003c4:	441a      	add	r2, r3
 80003c6:	4b45      	ldr	r3, [pc, #276]	; (80004dc <APP_FCA_Calculte_Threshold+0x160>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4941      	ldr	r1, [pc, #260]	; (80004d0 <APP_FCA_Calculte_Threshold+0x154>)
 80003cc:	6809      	ldr	r1, [r1, #0]
 80003ce:	fb01 f103 	mul.w	r1, r1, r3
 80003d2:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <APP_FCA_Calculte_Threshold+0x164>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	3332      	adds	r3, #50	; 0x32
 80003de:	4a41      	ldr	r2, [pc, #260]	; (80004e4 <APP_FCA_Calculte_Threshold+0x168>)
 80003e0:	6013      	str	r3, [r2, #0]
 80003e2:	e068      	b.n	80004b6 <APP_FCA_Calculte_Threshold+0x13a>
	}
	else if(situation == Vehicle_situation_normal_deceleration)
 80003e4:	4b39      	ldr	r3, [pc, #228]	; (80004cc <APP_FCA_Calculte_Threshold+0x150>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d131      	bne.n	8000450 <APP_FCA_Calculte_Threshold+0xd4>
	{
		threshold = ((V_h*V_h)/(2*a_h))-((V_F*V_F)/(2*a_f))+(((tbc+thum)*V_h)/1000)+((v_rel*(tbr/2))/1000)+D0;
 80003ec:	4b3a      	ldr	r3, [pc, #232]	; (80004d8 <APP_FCA_Calculte_Threshold+0x15c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <APP_FCA_Calculte_Threshold+0x15c>)
 80003f2:	6812      	ldr	r2, [r2, #0]
 80003f4:	fb02 f203 	mul.w	r2, r2, r3
 80003f8:	4b39      	ldr	r3, [pc, #228]	; (80004e0 <APP_FCA_Calculte_Threshold+0x164>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	fbb2 f2f3 	udiv	r2, r2, r3
 8000402:	4b36      	ldr	r3, [pc, #216]	; (80004dc <APP_FCA_Calculte_Threshold+0x160>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4935      	ldr	r1, [pc, #212]	; (80004dc <APP_FCA_Calculte_Threshold+0x160>)
 8000408:	6809      	ldr	r1, [r1, #0]
 800040a:	fb01 f103 	mul.w	r1, r1, r3
 800040e:	4b36      	ldr	r3, [pc, #216]	; (80004e8 <APP_FCA_Calculte_Threshold+0x16c>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	005b      	lsls	r3, r3, #1
 8000414:	fbb1 f3f3 	udiv	r3, r1, r3
 8000418:	1ad2      	subs	r2, r2, r3
 800041a:	4b2f      	ldr	r3, [pc, #188]	; (80004d8 <APP_FCA_Calculte_Threshold+0x15c>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f240 5146 	movw	r1, #1350	; 0x546
 8000422:	fb01 f303 	mul.w	r3, r1, r3
 8000426:	492b      	ldr	r1, [pc, #172]	; (80004d4 <APP_FCA_Calculte_Threshold+0x158>)
 8000428:	fba1 1303 	umull	r1, r3, r1, r3
 800042c:	099b      	lsrs	r3, r3, #6
 800042e:	18d1      	adds	r1, r2, r3
 8000430:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <APP_FCA_Calculte_Threshold+0x154>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	4613      	mov	r3, r2
 8000436:	011b      	lsls	r3, r3, #4
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	011a      	lsls	r2, r3, #4
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	4a25      	ldr	r2, [pc, #148]	; (80004d4 <APP_FCA_Calculte_Threshold+0x158>)
 8000440:	fba2 2303 	umull	r2, r3, r2, r3
 8000444:	099b      	lsrs	r3, r3, #6
 8000446:	440b      	add	r3, r1
 8000448:	3332      	adds	r3, #50	; 0x32
 800044a:	4a26      	ldr	r2, [pc, #152]	; (80004e4 <APP_FCA_Calculte_Threshold+0x168>)
 800044c:	6013      	str	r3, [r2, #0]
 800044e:	e032      	b.n	80004b6 <APP_FCA_Calculte_Threshold+0x13a>
	}
	else if (situation == Vehicle_situation_emergency_deceleration)
 8000450:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <APP_FCA_Calculte_Threshold+0x150>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d12e      	bne.n	80004b6 <APP_FCA_Calculte_Threshold+0x13a>
	{
		threshold = ((V_h*V_h)/(2*ahmax))-((V_F*V_F)/(2*afmax))+(((tbc+thum)*V_h)/1000)+((v_rel*(tbr/2))/1000)+D0;
 8000458:	4b1f      	ldr	r3, [pc, #124]	; (80004d8 <APP_FCA_Calculte_Threshold+0x15c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a1e      	ldr	r2, [pc, #120]	; (80004d8 <APP_FCA_Calculte_Threshold+0x15c>)
 800045e:	6812      	ldr	r2, [r2, #0]
 8000460:	fb02 f303 	mul.w	r3, r2, r3
 8000464:	4a21      	ldr	r2, [pc, #132]	; (80004ec <APP_FCA_Calculte_Threshold+0x170>)
 8000466:	fba2 2303 	umull	r2, r3, r2, r3
 800046a:	09da      	lsrs	r2, r3, #7
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <APP_FCA_Calculte_Threshold+0x160>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	491a      	ldr	r1, [pc, #104]	; (80004dc <APP_FCA_Calculte_Threshold+0x160>)
 8000472:	6809      	ldr	r1, [r1, #0]
 8000474:	fb01 f303 	mul.w	r3, r1, r3
 8000478:	491c      	ldr	r1, [pc, #112]	; (80004ec <APP_FCA_Calculte_Threshold+0x170>)
 800047a:	fba1 1303 	umull	r1, r3, r1, r3
 800047e:	09db      	lsrs	r3, r3, #7
 8000480:	1ad2      	subs	r2, r2, r3
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <APP_FCA_Calculte_Threshold+0x15c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f240 5146 	movw	r1, #1350	; 0x546
 800048a:	fb01 f303 	mul.w	r3, r1, r3
 800048e:	4911      	ldr	r1, [pc, #68]	; (80004d4 <APP_FCA_Calculte_Threshold+0x158>)
 8000490:	fba1 1303 	umull	r1, r3, r1, r3
 8000494:	099b      	lsrs	r3, r3, #6
 8000496:	18d1      	adds	r1, r2, r3
 8000498:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <APP_FCA_Calculte_Threshold+0x154>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4613      	mov	r3, r2
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	1a9b      	subs	r3, r3, r2
 80004a2:	011a      	lsls	r2, r3, #4
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <APP_FCA_Calculte_Threshold+0x158>)
 80004a8:	fba2 2303 	umull	r2, r3, r2, r3
 80004ac:	099b      	lsrs	r3, r3, #6
 80004ae:	440b      	add	r3, r1
 80004b0:	3332      	adds	r3, #50	; 0x32
 80004b2:	4a0c      	ldr	r2, [pc, #48]	; (80004e4 <APP_FCA_Calculte_Threshold+0x168>)
 80004b4:	6013      	str	r3, [r2, #0]
	}
	if(threshold >1000)
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <APP_FCA_Calculte_Threshold+0x168>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004be:	d903      	bls.n	80004c8 <APP_FCA_Calculte_Threshold+0x14c>
	{
		threshold = 1000;
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <APP_FCA_Calculte_Threshold+0x168>)
 80004c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80004c6:	601a      	str	r2, [r3, #0]
	}

}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	20000042 	.word	0x20000042
 80004d0:	20000044 	.word	0x20000044
 80004d4:	10624dd3 	.word	0x10624dd3
 80004d8:	20000048 	.word	0x20000048
 80004dc:	2000003c 	.word	0x2000003c
 80004e0:	2000002c 	.word	0x2000002c
 80004e4:	20000028 	.word	0x20000028
 80004e8:	20000034 	.word	0x20000034
 80004ec:	1b4e81b5 	.word	0x1b4e81b5

080004f0 <APP_FCA_Get_Actual_Speed_deceleration>:
 * @param [in] 		-none
 * @retval 			-none
 * Note				-none
 */
void APP_FCA_Get_Actual_Speed_deceleration()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
	uint16_t data ;
	MCAL_UART_ReceiveData(USART2, &data, enable);
 80004f6:	1dbb      	adds	r3, r7, #6
 80004f8:	2200      	movs	r2, #0
 80004fa:	4619      	mov	r1, r3
 80004fc:	4812      	ldr	r0, [pc, #72]	; (8000548 <APP_FCA_Get_Actual_Speed_deceleration+0x58>)
 80004fe:	f000 ff8d 	bl	800141c <MCAL_UART_ReceiveData>

	// Speed ... MSB 1
	// ACC   ... MSB 0

	if((data >>7))
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	09db      	lsrs	r3, r3, #7
 8000506:	b29b      	uxth	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d00a      	beq.n	8000522 <APP_FCA_Get_Actual_Speed_deceleration+0x32>
	{
		V_h = (10*(data & 0x7F));
 800050c:	88fb      	ldrh	r3, [r7, #6]
 800050e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000512:	4613      	mov	r3, r2
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	4413      	add	r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	461a      	mov	r2, r3
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <APP_FCA_Get_Actual_Speed_deceleration+0x5c>)
 800051e:	601a      	str	r2, [r3, #0]
	}
	else if((data >>7) == 0)
	{
		a_h = (data / 100) ;
	}
}
 8000520:	e00d      	b.n	800053e <APP_FCA_Get_Actual_Speed_deceleration+0x4e>
	else if((data >>7) == 0)
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	09db      	lsrs	r3, r3, #7
 8000526:	b29b      	uxth	r3, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	d108      	bne.n	800053e <APP_FCA_Get_Actual_Speed_deceleration+0x4e>
		a_h = (data / 100) ;
 800052c:	88fb      	ldrh	r3, [r7, #6]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <APP_FCA_Get_Actual_Speed_deceleration+0x60>)
 8000530:	fba2 2303 	umull	r2, r3, r2, r3
 8000534:	095b      	lsrs	r3, r3, #5
 8000536:	b29b      	uxth	r3, r3
 8000538:	461a      	mov	r2, r3
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <APP_FCA_Get_Actual_Speed_deceleration+0x64>)
 800053c:	601a      	str	r2, [r3, #0]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40004400 	.word	0x40004400
 800054c:	20000048 	.word	0x20000048
 8000550:	51eb851f 	.word	0x51eb851f
 8000554:	2000002c 	.word	0x2000002c

08000558 <APP_FCA_Set_Warning>:
	HAL_US_GET_relativeAndFollowing_volcity(&v_rel, &V_h, &V_F);
	*obstacle = V_F *2 ;
}

void APP_FCA_Set_Warning(uint8_t W_State)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
	if (W_State == Warning_ON)
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d105      	bne.n	8000574 <APP_FCA_Set_Warning+0x1c>
	{
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	210b      	movs	r1, #11
 800056c:	4806      	ldr	r0, [pc, #24]	; (8000588 <APP_FCA_Set_Warning+0x30>)
 800056e:	f001 f86b 	bl	8001648 <MCAL_GPIO_WritePin>
	}
	else
	{
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
	}
}
 8000572:	e004      	b.n	800057e <APP_FCA_Set_Warning+0x26>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	210b      	movs	r1, #11
 8000578:	4803      	ldr	r0, [pc, #12]	; (8000588 <APP_FCA_Set_Warning+0x30>)
 800057a:	f001 f865 	bl	8001648 <MCAL_GPIO_WritePin>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010800 	.word	0x40010800

0800058c <APP_FCA_Set_ACC>:
void APP_FCA_Set_ACC(uint8_t ACC_State)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	if (ACC_State == ACC_ON)
	{
		//ACC ON

	}
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <APP_FCA_Set_Emergency_Brake>:
void APP_FCA_Set_Emergency_Brake(uint8_t EMB_State)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	if( EMB_State==EMB_ON )
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d105      	bne.n	80005bc <APP_FCA_Set_Emergency_Brake+0x1c>
	{
		// Stop Car
		//MCAL_TIMER_Generate_PWM(TIMER3, CH_1, 75 , 500);
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	210c      	movs	r1, #12
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <APP_FCA_Set_Emergency_Brake+0x30>)
 80005b6:	f001 f847 	bl	8001648 <MCAL_GPIO_WritePin>
	{
		//MCAL_TIMER_Generate_PWM(TIMER3, CH_1, 0 , 500);
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);

	}
}
 80005ba:	e004      	b.n	80005c6 <APP_FCA_Set_Emergency_Brake+0x26>
		MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	210c      	movs	r1, #12
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <APP_FCA_Set_Emergency_Brake+0x30>)
 80005c2:	f001 f841 	bl	8001648 <MCAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40010800 	.word	0x40010800

080005d4 <US_CB>:
uint8_t Recieve_Flag = 0 ;
uint16_t previous_distance , current_distance ;
uint32_t time ;

void US_CB(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	US_time = MCAL_TIMER_Get_Time(TIMER2);
 80005d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80005dc:	f000 fd68 	bl	80010b0 <MCAL_TIMER_Get_Time>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <US_CB+0x28>)
 80005e4:	601a      	str	r2, [r3, #0]
	Recieve_Flag = 1 ;
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <US_CB+0x2c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]

	G_EXTI_Confg.IRQ_EN = EXTI_IRQ_DISABLE;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <US_CB+0x30>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	735a      	strb	r2, [r3, #13]
	MCAL_EXTI_GPIO_Update(&G_EXTI_Confg);
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <US_CB+0x30>)
 80005f4:	f000 fb22 	bl	8000c3c <MCAL_EXTI_GPIO_Update>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000074 	.word	0x20000074
 8000600:	20000024 	.word	0x20000024
 8000604:	2000005c 	.word	0x2000005c

08000608 <HAL_US_Init>:
 * @param [in] 		- USARTx: The USARTx (x-> 1,2,3) which data transmit within it .
 * @retval 			-none
 * Note				-in Serial_Passive_Mode you must select the USART that you use correct
 */
void HAL_US_Init(URM37_US_mode_t Sensor_Mode , USART_TypeDef* USARTx , TIMER_TypeDef* TIMERx)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	73fb      	strb	r3, [r7, #15]
	if (Sensor_Mode == PWM_Output_in_Trigger_Mode)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d120      	bne.n	800065e <HAL_US_Init+0x56>
	{
		// Configuration of EXTI0PA0
		G_EXTI_Confg.EXTI_Pin = EXTI0PA0;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <HAL_US_Init+0xb0>)
 800061e:	4a27      	ldr	r2, [pc, #156]	; (80006bc <HAL_US_Init+0xb4>)
 8000620:	ca07      	ldmia	r2, {r0, r1, r2}
 8000622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		G_EXTI_Confg.Trigger_case = EXTI_TRIGGER_FALLING;
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <HAL_US_Init+0xb0>)
 8000628:	2201      	movs	r2, #1
 800062a:	731a      	strb	r2, [r3, #12]
		G_EXTI_Confg.P_IRQ_CallBack= US_CB;
 800062c:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <HAL_US_Init+0xb0>)
 800062e:	4a24      	ldr	r2, [pc, #144]	; (80006c0 <HAL_US_Init+0xb8>)
 8000630:	611a      	str	r2, [r3, #16]
		G_EXTI_Confg.IRQ_EN = EXTI_IRQ_DISABLE;
 8000632:	4b21      	ldr	r3, [pc, #132]	; (80006b8 <HAL_US_Init+0xb0>)
 8000634:	2200      	movs	r2, #0
 8000636:	735a      	strb	r2, [r3, #13]
		MCAL_EXTI_GPIO_Update(&G_EXTI_Confg);
 8000638:	481f      	ldr	r0, [pc, #124]	; (80006b8 <HAL_US_Init+0xb0>)
 800063a:	f000 faff 	bl	8000c3c <MCAL_EXTI_GPIO_Update>

		// Configuration of Trig as OutPut
		GPIO_PinConfig_t PinCfg ;
		PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800063e:	2301      	movs	r3, #1
 8000640:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2304      	movs	r3, #4
 8000646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_50M;
 800064a:	2303      	movs	r3, #3
 800064c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8000650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000654:	4619      	mov	r1, r3
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <HAL_US_Init+0xbc>)
 8000658:	f000 ff74 	bl	8001544 <MCAL_GPIO_Init>
 800065c:	e023      	b.n	80006a6 <HAL_US_Init+0x9e>

	}
	else if ((Sensor_Mode == Serial_Passive_Mode) || (Sensor_Mode == TF_LUNA_LIDAR_MODE) || (Sensor_Mode == UART_With_Microcontroller))
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d005      	beq.n	8000670 <HAL_US_Init+0x68>
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b02      	cmp	r3, #2
 8000668:	d002      	beq.n	8000670 <HAL_US_Init+0x68>
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d11a      	bne.n	80006a6 <HAL_US_Init+0x9e>
	{
		G_USARTx = USARTx ;
 8000670:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <HAL_US_Init+0xc0>)
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	6013      	str	r3, [r2, #0]
		UART_PinConfig_t uart_cfg;
		uart_cfg.BaudRate = UART_BaudRate_115200 ;
 8000676:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800067a:	617b      	str	r3, [r7, #20]
		uart_cfg.HwFlowCtl = UART_HwFlowCtl_NONE;
 800067c:	2300      	movs	r3, #0
 800067e:	76fb      	strb	r3, [r7, #27]
		uart_cfg.IRQ_Enable = UART_IRQ_Enable_NONE;
 8000680:	2300      	movs	r3, #0
 8000682:	773b      	strb	r3, [r7, #28]
		uart_cfg.Mode = UART_Mode_TX_RX;
 8000684:	230c      	movs	r3, #12
 8000686:	743b      	strb	r3, [r7, #16]
		uart_cfg.Parity = UART_Parity__NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	767b      	strb	r3, [r7, #25]
		uart_cfg.Payload_Length = UART_Payload_Length_8B ;
 800068c:	2300      	movs	r3, #0
 800068e:	763b      	strb	r3, [r7, #24]
		uart_cfg.StopBits = UART_StopBits__1 ;
 8000690:	2300      	movs	r3, #0
 8000692:	76bb      	strb	r3, [r7, #26]
		MCAL_UART_Init(USARTx, &uart_cfg);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	68b8      	ldr	r0, [r7, #8]
 800069c:	f000 fd84 	bl	80011a8 <MCAL_UART_Init>
		MCAL_UART_GPIO_Set_Pins(USARTx);
 80006a0:	68b8      	ldr	r0, [r7, #8]
 80006a2:	f000 fe59 	bl	8001358 <MCAL_UART_GPIO_Set_Pins>
	}

	// Start Timers which used in the APP
	MCAL_TIMER_Start_Stop_Calculate_Time(TIMERx, start);
 80006a6:	2100      	movs	r1, #0
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 fcbb 	bl	8001024 <MCAL_TIMER_Start_Stop_Calculate_Time>

}
 80006ae:	bf00      	nop
 80006b0:	3728      	adds	r7, #40	; 0x28
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000005c 	.word	0x2000005c
 80006bc:	080016f0 	.word	0x080016f0
 80006c0:	080005d5 	.word	0x080005d5
 80006c4:	40010800 	.word	0x40010800
 80006c8:	20000058 	.word	0x20000058

080006cc <Hal_US_GET_distance>:
 * @param [in] 		- TF_distance: Pointer to the Place which distance Store in
 * @retval 			-none
 * Note				-none
 */
void Hal_US_GET_distance(uint16_t* TF_distance)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	MCAL_UART_ReceiveData(G_USARTx, TF_distance, enable);
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <Hal_US_GET_distance+0x30>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2200      	movs	r2, #0
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe9d 	bl	800141c <MCAL_UART_ReceiveData>
	*TF_distance *=10 ;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	801a      	strh	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000058 	.word	0x20000058

08000700 <HAL_US_GET_relativeAndFollowing_volcity>:
 * @param [in] 		- V_f: Pointer to the Place which  the Front vehicle Store in
 * @retval 			-none
 * Note				-none
 */
void HAL_US_GET_relativeAndFollowing_volcity(uint32_t* V_rel,uint32_t* Actual_Volicty , uint32_t* V_f)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
	//HAL_US_GET_DISTANCE_Serial_Passive_Mode(&distance1);

	// Start Delay
	//MCAL_TIMER_Delay(TIMER2, 30 , TIMER_MILL_SEC);

	time = MCAL_TIMER_Get_Time(TIMER3);
 800070c:	482a      	ldr	r0, [pc, #168]	; (80007b8 <HAL_US_GET_relativeAndFollowing_volcity+0xb8>)
 800070e:	f000 fccf 	bl	80010b0 <MCAL_TIMER_Get_Time>
 8000712:	4602      	mov	r2, r0
 8000714:	4b29      	ldr	r3, [pc, #164]	; (80007bc <HAL_US_GET_relativeAndFollowing_volcity+0xbc>)
 8000716:	601a      	str	r2, [r3, #0]
	if(time >= 300)
 8000718:	4b28      	ldr	r3, [pc, #160]	; (80007bc <HAL_US_GET_relativeAndFollowing_volcity+0xbc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000720:	d346      	bcc.n	80007b0 <HAL_US_GET_relativeAndFollowing_volcity+0xb0>
	{
		//Stop time
		MCAL_TIMER_Start_Stop_Calculate_Time(TIMER3, stop);
 8000722:	2101      	movs	r1, #1
 8000724:	4824      	ldr	r0, [pc, #144]	; (80007b8 <HAL_US_GET_relativeAndFollowing_volcity+0xb8>)
 8000726:	f000 fc7d 	bl	8001024 <MCAL_TIMER_Start_Stop_Calculate_Time>

		// Get distance2
		Hal_US_GET_distance(&current_distance);
 800072a:	4825      	ldr	r0, [pc, #148]	; (80007c0 <HAL_US_GET_relativeAndFollowing_volcity+0xc0>)
 800072c:	f7ff ffce 	bl	80006cc <Hal_US_GET_distance>

		// find the relative velocity
		*V_rel = (current_distance > previous_distance)? (((current_distance - previous_distance)*1000000)/time) :  (((previous_distance - current_distance)*1000000)/time);
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <HAL_US_GET_relativeAndFollowing_volcity+0xc0>)
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <HAL_US_GET_relativeAndFollowing_volcity+0xc4>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d90e      	bls.n	800075a <HAL_US_GET_relativeAndFollowing_volcity+0x5a>
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <HAL_US_GET_relativeAndFollowing_volcity+0xc0>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <HAL_US_GET_relativeAndFollowing_volcity+0xc4>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <HAL_US_GET_relativeAndFollowing_volcity+0xc8>)
 800074a:	fb02 f303 	mul.w	r3, r2, r3
 800074e:	461a      	mov	r2, r3
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <HAL_US_GET_relativeAndFollowing_volcity+0xbc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	fbb2 f3f3 	udiv	r3, r2, r3
 8000758:	e00d      	b.n	8000776 <HAL_US_GET_relativeAndFollowing_volcity+0x76>
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <HAL_US_GET_relativeAndFollowing_volcity+0xc4>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	461a      	mov	r2, r3
 8000760:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <HAL_US_GET_relativeAndFollowing_volcity+0xc0>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <HAL_US_GET_relativeAndFollowing_volcity+0xc8>)
 8000768:	fb02 f303 	mul.w	r3, r2, r3
 800076c:	461a      	mov	r2, r3
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <HAL_US_GET_relativeAndFollowing_volcity+0xbc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	6013      	str	r3, [r2, #0]

		// velocity of the following vehicle
		*V_f = (current_distance > previous_distance)?  (*V_rel + *Actual_Volicty) : (*Actual_Volicty - *V_rel) ;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <HAL_US_GET_relativeAndFollowing_volcity+0xc0>)
 800077c:	881a      	ldrh	r2, [r3, #0]
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <HAL_US_GET_relativeAndFollowing_volcity+0xc4>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	429a      	cmp	r2, r3
 8000784:	d905      	bls.n	8000792 <HAL_US_GET_relativeAndFollowing_volcity+0x92>
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4413      	add	r3, r2
 8000790:	e004      	b.n	800079c <HAL_US_GET_relativeAndFollowing_volcity+0x9c>
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	6013      	str	r3, [r2, #0]

		previous_distance = current_distance ;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_US_GET_relativeAndFollowing_volcity+0xc0>)
 80007a2:	881a      	ldrh	r2, [r3, #0]
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <HAL_US_GET_relativeAndFollowing_volcity+0xc4>)
 80007a6:	801a      	strh	r2, [r3, #0]

		//Reset timer
		MCAL_TIMER_Start_Stop_Calculate_Time(TIMER3, start);
 80007a8:	2100      	movs	r1, #0
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <HAL_US_GET_relativeAndFollowing_volcity+0xb8>)
 80007ac:	f000 fc3a 	bl	8001024 <MCAL_TIMER_Start_Stop_Calculate_Time>
	}
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40000400 	.word	0x40000400
 80007bc:	20000078 	.word	0x20000078
 80007c0:	2000007c 	.word	0x2000007c
 80007c4:	20000056 	.word	0x20000056
 80007c8:	000f4240 	.word	0x000f4240

080007cc <Clock_init>:

uint16_t distance ;
uint32_t Vrel  , Vf , VAct ;

void Clock_init()
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
	// UART Enable
	RCC_USART1_CLK_EN();
 80007d0:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <Clock_init+0x78>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <Clock_init+0x78>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6193      	str	r3, [r2, #24]
	RCC_USART2_CLK_EN();
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <Clock_init+0x78>)
 80007de:	69db      	ldr	r3, [r3, #28]
 80007e0:	4a18      	ldr	r2, [pc, #96]	; (8000844 <Clock_init+0x78>)
 80007e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e6:	61d3      	str	r3, [r2, #28]

	// GPIO Enable
	RCC_GPIOC_CLK_EN();
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <Clock_init+0x78>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a15      	ldr	r2, [pc, #84]	; (8000844 <Clock_init+0x78>)
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6193      	str	r3, [r2, #24]
	RCC_GPIOA_CLK_EN();
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <Clock_init+0x78>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a12      	ldr	r2, [pc, #72]	; (8000844 <Clock_init+0x78>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <Clock_init+0x78>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <Clock_init+0x78>)
 8000806:	f043 0308 	orr.w	r3, r3, #8
 800080a:	6193      	str	r3, [r2, #24]

	// TIMER Enable
	RCC_TIMER2_CLK_EN();
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <Clock_init+0x78>)
 800080e:	69db      	ldr	r3, [r3, #28]
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <Clock_init+0x78>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	61d3      	str	r3, [r2, #28]
	RCC_TIMER3_CLK_EN();
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <Clock_init+0x78>)
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <Clock_init+0x78>)
 800081e:	f043 0302 	orr.w	r3, r3, #2
 8000822:	61d3      	str	r3, [r2, #28]
	RCC_TIMER4_CLK_EN();
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <Clock_init+0x78>)
 8000826:	69db      	ldr	r3, [r3, #28]
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <Clock_init+0x78>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	61d3      	str	r3, [r2, #28]

	// AFIO Enable
	RCC_AFIO_CLK_EN();
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <Clock_init+0x78>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a03      	ldr	r2, [pc, #12]	; (8000844 <Clock_init+0x78>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6193      	str	r3, [r2, #24]


}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40021000 	.word	0x40021000

08000848 <main>:


int main(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	Clock_init();
 800084c:	f7ff ffbe 	bl	80007cc <Clock_init>
	HAL_US_Init(UART_With_Microcontroller , USART1 , TIMER3);
 8000850:	4a05      	ldr	r2, [pc, #20]	; (8000868 <main+0x20>)
 8000852:	4906      	ldr	r1, [pc, #24]	; (800086c <main+0x24>)
 8000854:	2003      	movs	r0, #3
 8000856:	f7ff fed7 	bl	8000608 <HAL_US_Init>
	APP_FCA_Init(USART2);
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <main+0x28>)
 800085c:	f7ff fcdc 	bl	8000218 <APP_FCA_Init>

    /* Loop forever */
	while(1)
	{
		APP_FCA_Detecte_Collision_Status();
 8000860:	f7ff fd1e 	bl	80002a0 <APP_FCA_Detecte_Collision_Status>
 8000864:	e7fc      	b.n	8000860 <main+0x18>
 8000866:	bf00      	nop
 8000868:	40000400 	.word	0x40000400
 800086c:	40013800 	.word	0x40013800
 8000870:	40004400 	.word	0x40004400

08000874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000876:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000878:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LoopForever+0xe>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	; (80008c0 <LoopForever+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a2:	f000 fef5 	bl	8001690 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff ffcf 	bl	8000848 <main>

080008aa <LoopForever>:

LoopForever:
    b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008b8:	0800170c 	.word	0x0800170c
  ldr r2, =_sbss
 80008bc:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80008c0:	20000130 	.word	0x20000130

080008c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC1_2_IRQHandler>
	...

080008c8 <Enable_NVIC>:
											(x==GPIOD)?3:0  )
//-----------------------------
//Generic Functions
//-----------------------------
void Enable_NVIC(uint16_t IRQ)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80008d2:	88fb      	ldrh	r3, [r7, #6]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d854      	bhi.n	8000982 <Enable_NVIC+0xba>
 80008d8:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <Enable_NVIC+0x18>)
 80008da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008de:	bf00      	nop
 80008e0:	08000921 	.word	0x08000921
 80008e4:	0800092f 	.word	0x0800092f
 80008e8:	0800093d 	.word	0x0800093d
 80008ec:	0800094b 	.word	0x0800094b
 80008f0:	08000959 	.word	0x08000959
 80008f4:	08000967 	.word	0x08000967
 80008f8:	08000967 	.word	0x08000967
 80008fc:	08000967 	.word	0x08000967
 8000900:	08000967 	.word	0x08000967
 8000904:	08000967 	.word	0x08000967
 8000908:	08000975 	.word	0x08000975
 800090c:	08000975 	.word	0x08000975
 8000910:	08000975 	.word	0x08000975
 8000914:	08000975 	.word	0x08000975
 8000918:	08000975 	.word	0x08000975
 800091c:	08000975 	.word	0x08000975
	{
	case 0 :
		NVIC_IRQ6_EXTI0_ENABLE;
 8000920:	4b1a      	ldr	r3, [pc, #104]	; (800098c <Enable_NVIC+0xc4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a19      	ldr	r2, [pc, #100]	; (800098c <Enable_NVIC+0xc4>)
 8000926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092a:	6013      	str	r3, [r2, #0]
		break;
 800092c:	e029      	b.n	8000982 <Enable_NVIC+0xba>
	case 1 :
		NVIC_IRQ7_EXTI1_ENABLE;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <Enable_NVIC+0xc4>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <Enable_NVIC+0xc4>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6013      	str	r3, [r2, #0]
		break;
 800093a:	e022      	b.n	8000982 <Enable_NVIC+0xba>
	case 2 :
		NVIC_IRQ8_EXTI2_ENABLE;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <Enable_NVIC+0xc4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a12      	ldr	r2, [pc, #72]	; (800098c <Enable_NVIC+0xc4>)
 8000942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000946:	6013      	str	r3, [r2, #0]
		break;
 8000948:	e01b      	b.n	8000982 <Enable_NVIC+0xba>
	case 3 :
		NVIC_IRQ8_EXTI2_ENABLE;
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <Enable_NVIC+0xc4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <Enable_NVIC+0xc4>)
 8000950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000954:	6013      	str	r3, [r2, #0]
		break;
 8000956:	e014      	b.n	8000982 <Enable_NVIC+0xba>
	case 4 :
		NVIC_IRQ9_EXTI3_ENABLE;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <Enable_NVIC+0xc4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0b      	ldr	r2, [pc, #44]	; (800098c <Enable_NVIC+0xc4>)
 800095e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000962:	6013      	str	r3, [r2, #0]
		break;
 8000964:	e00d      	b.n	8000982 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_ENABLE;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <Enable_NVIC+0xc4>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <Enable_NVIC+0xc4>)
 800096c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000970:	6013      	str	r3, [r2, #0]
		break;
 8000972:	e006      	b.n	8000982 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_ENABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <Enable_NVIC+0xc8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a05      	ldr	r2, [pc, #20]	; (8000990 <Enable_NVIC+0xc8>)
 800097a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800097e:	6013      	str	r3, [r2, #0]
		break;
 8000980:	bf00      	nop
	}
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000e104 	.word	0xe000e104

08000994 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	2b0f      	cmp	r3, #15
 80009a2:	d854      	bhi.n	8000a4e <Disable_NVIC+0xba>
 80009a4:	a201      	add	r2, pc, #4	; (adr r2, 80009ac <Disable_NVIC+0x18>)
 80009a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009aa:	bf00      	nop
 80009ac:	080009ed 	.word	0x080009ed
 80009b0:	080009fb 	.word	0x080009fb
 80009b4:	08000a09 	.word	0x08000a09
 80009b8:	08000a17 	.word	0x08000a17
 80009bc:	08000a25 	.word	0x08000a25
 80009c0:	08000a33 	.word	0x08000a33
 80009c4:	08000a33 	.word	0x08000a33
 80009c8:	08000a33 	.word	0x08000a33
 80009cc:	08000a33 	.word	0x08000a33
 80009d0:	08000a33 	.word	0x08000a33
 80009d4:	08000a41 	.word	0x08000a41
 80009d8:	08000a41 	.word	0x08000a41
 80009dc:	08000a41 	.word	0x08000a41
 80009e0:	08000a41 	.word	0x08000a41
 80009e4:	08000a41 	.word	0x08000a41
 80009e8:	08000a41 	.word	0x08000a41
	{
	case 0 :
		NVIC_IRQ6_EXTI0_DISABLE;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <Disable_NVIC+0xc4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <Disable_NVIC+0xc4>)
 80009f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f6:	6013      	str	r3, [r2, #0]
		break;
 80009f8:	e029      	b.n	8000a4e <Disable_NVIC+0xba>
	case 1 :
		NVIC_IRQ7_EXTI1_DISABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <Disable_NVIC+0xc4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6013      	str	r3, [r2, #0]
		break;
 8000a06:	e022      	b.n	8000a4e <Disable_NVIC+0xba>
	case 2 :
		NVIC_IRQ8_EXTI2_DISABLE;
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a12:	6013      	str	r3, [r2, #0]
		break;
 8000a14:	e01b      	b.n	8000a4e <Disable_NVIC+0xba>
	case 3 :
		NVIC_IRQ8_EXTI2_DISABLE;
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a20:	6013      	str	r3, [r2, #0]
		break;
 8000a22:	e014      	b.n	8000a4e <Disable_NVIC+0xba>
	case 4 :
		NVIC_IRQ9_EXTI3_DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2e:	6013      	str	r3, [r2, #0]
		break;
 8000a30:	e00d      	b.n	8000a4e <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_DISABLE;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <Disable_NVIC+0xc4>)
 8000a38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a3c:	6013      	str	r3, [r2, #0]
		break;
 8000a3e:	e006      	b.n	8000a4e <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_DISABLE;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <Disable_NVIC+0xc8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <Disable_NVIC+0xc8>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
		break;
 8000a4c:	bf00      	nop
	}
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	e000e180 	.word	0xe000e180
 8000a5c:	e000e184 	.word	0xe000e184

08000a60 <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_cfg)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	// Configure GPIO AF Input --> Floating Input
	GPIO_PinConfig_t GPIO_Cfg ;
	GPIO_Cfg.GPIO_PinNumber = EXTI_cfg->EXTI_Pin.GPIO_Pin;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	891b      	ldrh	r3, [r3, #8]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	723b      	strb	r3, [r7, #8]
	GPIO_Cfg.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000a70:	2301      	movs	r3, #1
 8000a72:	727b      	strb	r3, [r7, #9]
	MCAL_GPIO_Init(EXTI_cfg->EXTI_Pin.GPIO_Port, &GPIO_Cfg);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f107 0208 	add.w	r2, r7, #8
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fd60 	bl	8001544 <MCAL_GPIO_Init>
	//================================================================

	// Update the AFIO to Route EXTI Line with Port A,B,C,D
	uint8_t AFIO_EXTICR_Index    = (EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber /4);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Position = (EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber %4)*4;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	f003 0303 	and.w	r3, r3, #3
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	009b      	lsls	r3, r3, #2
 8000a9c:	73bb      	strb	r3, [r7, #14]

	//Clear Four bit
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position);
 8000a9e:	4a60      	ldr	r2, [pc, #384]	; (8000c20 <Update_EXTI+0x1c0>)
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	210f      	movs	r1, #15
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	495a      	ldr	r1, [pc, #360]	; (8000c20 <Update_EXTI+0x1c0>)
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	4002      	ands	r2, r0
 8000aba:	3302      	adds	r3, #2
 8000abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_cfg->EXTI_Pin.GPIO_Port) & 0xF) << AFIO_EXTICR_Position);
 8000ac0:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <Update_EXTI+0x1c0>)
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	4955      	ldr	r1, [pc, #340]	; (8000c24 <Update_EXTI+0x1c4>)
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	d016      	beq.n	8000b02 <Update_EXTI+0xa2>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	4953      	ldr	r1, [pc, #332]	; (8000c28 <Update_EXTI+0x1c8>)
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d00f      	beq.n	8000afe <Update_EXTI+0x9e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4952      	ldr	r1, [pc, #328]	; (8000c2c <Update_EXTI+0x1cc>)
 8000ae4:	428b      	cmp	r3, r1
 8000ae6:	d008      	beq.n	8000afa <Update_EXTI+0x9a>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4950      	ldr	r1, [pc, #320]	; (8000c30 <Update_EXTI+0x1d0>)
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d101      	bne.n	8000af6 <Update_EXTI+0x96>
 8000af2:	2303      	movs	r3, #3
 8000af4:	e006      	b.n	8000b04 <Update_EXTI+0xa4>
 8000af6:	2300      	movs	r3, #0
 8000af8:	e004      	b.n	8000b04 <Update_EXTI+0xa4>
 8000afa:	2302      	movs	r3, #2
 8000afc:	e002      	b.n	8000b04 <Update_EXTI+0xa4>
 8000afe:	2301      	movs	r3, #1
 8000b00:	e000      	b.n	8000b04 <Update_EXTI+0xa4>
 8000b02:	2300      	movs	r3, #0
 8000b04:	7bb9      	ldrb	r1, [r7, #14]
 8000b06:	408b      	lsls	r3, r1
 8000b08:	4618      	mov	r0, r3
 8000b0a:	4945      	ldr	r1, [pc, #276]	; (8000c20 <Update_EXTI+0x1c0>)
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	4302      	orrs	r2, r0
 8000b10:	3302      	adds	r3, #2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//================================================================

	// Update Raising or Falling Trigger
	//DisableRaising or Falling Trigger
	EXTI->RTSR &= ~(1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000b16:	4b47      	ldr	r3, [pc, #284]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	8812      	ldrh	r2, [r2, #0]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	2201      	movs	r2, #1
 8000b22:	408a      	lsls	r2, r1
 8000b24:	43d2      	mvns	r2, r2
 8000b26:	4611      	mov	r1, r2
 8000b28:	4a42      	ldr	r2, [pc, #264]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b2a:	400b      	ands	r3, r1
 8000b2c:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	8812      	ldrh	r2, [r2, #0]
 8000b36:	4611      	mov	r1, r2
 8000b38:	2201      	movs	r2, #1
 8000b3a:	408a      	lsls	r2, r1
 8000b3c:	43d2      	mvns	r2, r2
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4a3c      	ldr	r2, [pc, #240]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b42:	400b      	ands	r3, r1
 8000b44:	60d3      	str	r3, [r2, #12]

	if(EXTI_cfg->Trigger_case == EXTI_TRIGGER_RAISING)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	7b1b      	ldrb	r3, [r3, #12]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d10b      	bne.n	8000b66 <Update_EXTI+0x106>
	{
		EXTI->RTSR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000b4e:	4b39      	ldr	r3, [pc, #228]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	8812      	ldrh	r2, [r2, #0]
 8000b56:	4611      	mov	r1, r2
 8000b58:	2201      	movs	r2, #1
 8000b5a:	408a      	lsls	r2, r1
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4a35      	ldr	r2, [pc, #212]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b60:	430b      	orrs	r3, r1
 8000b62:	6093      	str	r3, [r2, #8]
 8000b64:	e029      	b.n	8000bba <Update_EXTI+0x15a>
	}
	else if(EXTI_cfg->Trigger_case == EXTI_TRIGGER_FALLING)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	7b1b      	ldrb	r3, [r3, #12]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d10b      	bne.n	8000b86 <Update_EXTI+0x126>
	{
		EXTI->FTSR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000b6e:	4b31      	ldr	r3, [pc, #196]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	8812      	ldrh	r2, [r2, #0]
 8000b76:	4611      	mov	r1, r2
 8000b78:	2201      	movs	r2, #1
 8000b7a:	408a      	lsls	r2, r1
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4a2d      	ldr	r2, [pc, #180]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b80:	430b      	orrs	r3, r1
 8000b82:	60d3      	str	r3, [r2, #12]
 8000b84:	e019      	b.n	8000bba <Update_EXTI+0x15a>
	}
	else if(EXTI_cfg->Trigger_case == EXTI_TRIGGER_RaisingAndFalling)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	7b1b      	ldrb	r3, [r3, #12]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d115      	bne.n	8000bba <Update_EXTI+0x15a>
	{
		EXTI->RTSR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <Update_EXTI+0x1d4>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	8812      	ldrh	r2, [r2, #0]
 8000b96:	4611      	mov	r1, r2
 8000b98:	2201      	movs	r2, #1
 8000b9a:	408a      	lsls	r2, r1
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4a25      	ldr	r2, [pc, #148]	; (8000c34 <Update_EXTI+0x1d4>)
 8000ba0:	430b      	orrs	r3, r1
 8000ba2:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <Update_EXTI+0x1d4>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	8812      	ldrh	r2, [r2, #0]
 8000bac:	4611      	mov	r1, r2
 8000bae:	2201      	movs	r2, #1
 8000bb0:	408a      	lsls	r2, r1
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4a1f      	ldr	r2, [pc, #124]	; (8000c34 <Update_EXTI+0x1d4>)
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	60d3      	str	r3, [r2, #12]
	}
	//================================================================

	//Update the IRQ CallBack Function
	GP_IRQ_CallBack[EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber] = EXTI_cfg->P_IRQ_CallBack ;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <Update_EXTI+0x1d8>)
 8000bc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	//================================================================

	// Enable or Disable IRQ EXTI and NVIC
	if(EXTI_cfg->IRQ_EN == EXTI_IRQ_ENABLE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7b5b      	ldrb	r3, [r3, #13]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d110      	bne.n	8000bf4 <Update_EXTI+0x194>
	{
		EXTI->IMR |= (1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <Update_EXTI+0x1d4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	8812      	ldrh	r2, [r2, #0]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	2201      	movs	r2, #1
 8000bde:	408a      	lsls	r2, r1
 8000be0:	4611      	mov	r1, r2
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <Update_EXTI+0x1d4>)
 8000be4:	430b      	orrs	r3, r1
 8000be6:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fe6b 	bl	80008c8 <Enable_NVIC>
	else
	{
		EXTI->IMR &= ~(1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
	}
}
 8000bf2:	e010      	b.n	8000c16 <Update_EXTI+0x1b6>
		EXTI->IMR &= ~(1<<EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <Update_EXTI+0x1d4>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	8812      	ldrh	r2, [r2, #0]
 8000bfc:	4611      	mov	r1, r2
 8000bfe:	2201      	movs	r2, #1
 8000c00:	408a      	lsls	r2, r1
 8000c02:	43d2      	mvns	r2, r2
 8000c04:	4611      	mov	r1, r2
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <Update_EXTI+0x1d4>)
 8000c08:	400b      	ands	r3, r1
 8000c0a:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_cfg->EXTI_Pin.EXTI_InputLineNumber);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff febf 	bl	8000994 <Disable_NVIC>
}
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40010000 	.word	0x40010000
 8000c24:	40010800 	.word	0x40010800
 8000c28:	40010c00 	.word	0x40010c00
 8000c2c:	40011000 	.word	0x40011000
 8000c30:	40011400 	.word	0x40011400
 8000c34:	40010400 	.word	0x40010400
 8000c38:	20000080 	.word	0x20000080

08000c3c <MCAL_EXTI_GPIO_Update>:
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 * 				-Also Mandatory to Enable RCC Clock for AFIO and GPIO
 */
void MCAL_EXTI_GPIO_Update(EXTI_PinConfig_t* EXTI_cfg)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_cfg);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff0b 	bl	8000a60 <Update_EXTI>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <EXTI0_IRQHandler>:

//-----------------------------
//ISR Functions
//-----------------------------
void EXTI0_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<0);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <EXTI0_IRQHandler+0x1c>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <EXTI0_IRQHandler+0x1c>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[0]();
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <EXTI0_IRQHandler+0x20>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4798      	blx	r3
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010400 	.word	0x40010400
 8000c74:	20000080 	.word	0x20000080

08000c78 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<1);
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <EXTI1_IRQHandler+0x1c>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <EXTI1_IRQHandler+0x1c>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[1]();
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <EXTI1_IRQHandler+0x20>)
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	4798      	blx	r3
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010400 	.word	0x40010400
 8000c98:	20000080 	.word	0x20000080

08000c9c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<2);
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <EXTI2_IRQHandler+0x1c>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <EXTI2_IRQHandler+0x1c>)
 8000ca6:	f043 0304 	orr.w	r3, r3, #4
 8000caa:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[2]();
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <EXTI2_IRQHandler+0x20>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4798      	blx	r3
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40010400 	.word	0x40010400
 8000cbc:	20000080 	.word	0x20000080

08000cc0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<3);
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <EXTI3_IRQHandler+0x1c>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <EXTI3_IRQHandler+0x1c>)
 8000cca:	f043 0308 	orr.w	r3, r3, #8
 8000cce:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[3]();
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <EXTI3_IRQHandler+0x20>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	4798      	blx	r3
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400
 8000ce0:	20000080 	.word	0x20000080

08000ce4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	// Clear Pending Pin cleared by writing a ‘1’ into the bit
	EXTI->PR |= (1<<4);
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <EXTI4_IRQHandler+0x1c>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <EXTI4_IRQHandler+0x1c>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6153      	str	r3, [r2, #20]

	GP_IRQ_CallBack[4]();
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <EXTI4_IRQHandler+0x20>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4798      	blx	r3
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010400 	.word	0x40010400
 8000d04:	20000080 	.word	0x20000080

08000d08 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5){ EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d0e:	695b      	ldr	r3, [r3, #20]
 8000d10:	f003 0320 	and.w	r3, r3, #32
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <EXTI9_5_IRQHandler+0x24>
 8000d18:	4b25      	ldr	r3, [pc, #148]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d1a:	695b      	ldr	r3, [r3, #20]
 8000d1c:	4a24      	ldr	r2, [pc, #144]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d1e:	f043 0320 	orr.w	r3, r3, #32
 8000d22:	6153      	str	r3, [r2, #20]
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <EXTI9_5_IRQHandler+0xac>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4798      	blx	r3
	else if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
	else if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
	else if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
	else if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
}
 8000d2a:	e03e      	b.n	8000daa <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<6){ EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d009      	beq.n	8000d4c <EXTI9_5_IRQHandler+0x44>
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d42:	6153      	str	r3, [r2, #20]
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <EXTI9_5_IRQHandler+0xac>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	4798      	blx	r3
}
 8000d4a:	e02e      	b.n	8000daa <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<7){ EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d009      	beq.n	8000d6c <EXTI9_5_IRQHandler+0x64>
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d62:	6153      	str	r3, [r2, #20]
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <EXTI9_5_IRQHandler+0xac>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4798      	blx	r3
}
 8000d6a:	e01e      	b.n	8000daa <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<8){ EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d009      	beq.n	8000d8c <EXTI9_5_IRQHandler+0x84>
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d82:	6153      	str	r3, [r2, #20]
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <EXTI9_5_IRQHandler+0xac>)
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	4798      	blx	r3
}
 8000d8a:	e00e      	b.n	8000daa <EXTI9_5_IRQHandler+0xa2>
	else if(EXTI->PR & 1<<9){ EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d008      	beq.n	8000daa <EXTI9_5_IRQHandler+0xa2>
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <EXTI9_5_IRQHandler+0xa8>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6153      	str	r3, [r2, #20]
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <EXTI9_5_IRQHandler+0xac>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	4798      	blx	r3
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40010400 	.word	0x40010400
 8000db4:	20000080 	.word	0x20000080

08000db8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10){ EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 8000dbc:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d009      	beq.n	8000ddc <EXTI15_10_IRQHandler+0x24>
 8000dc8:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	4a2c      	ldr	r2, [pc, #176]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6153      	str	r3, [r2, #20]
 8000dd4:	4b2b      	ldr	r3, [pc, #172]	; (8000e84 <EXTI15_10_IRQHandler+0xcc>)
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	4798      	blx	r3
	else if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
	else if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
	else if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
	else if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
	else if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
}
 8000dda:	e04e      	b.n	8000e7a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<11){ EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 8000ddc:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d009      	beq.n	8000dfc <EXTI15_10_IRQHandler+0x44>
 8000de8:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000dee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000df2:	6153      	str	r3, [r2, #20]
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <EXTI15_10_IRQHandler+0xcc>)
 8000df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df8:	4798      	blx	r3
}
 8000dfa:	e03e      	b.n	8000e7a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<12){ EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 8000dfc:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d009      	beq.n	8000e1c <EXTI15_10_IRQHandler+0x64>
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e12:	6153      	str	r3, [r2, #20]
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <EXTI15_10_IRQHandler+0xcc>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4798      	blx	r3
}
 8000e1a:	e02e      	b.n	8000e7a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<13){ EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 8000e1c:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d009      	beq.n	8000e3c <EXTI15_10_IRQHandler+0x84>
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	4a14      	ldr	r2, [pc, #80]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e32:	6153      	str	r3, [r2, #20]
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <EXTI15_10_IRQHandler+0xcc>)
 8000e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e38:	4798      	blx	r3
}
 8000e3a:	e01e      	b.n	8000e7a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<14){ EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d009      	beq.n	8000e5c <EXTI15_10_IRQHandler+0xa4>
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e4a:	695b      	ldr	r3, [r3, #20]
 8000e4c:	4a0c      	ldr	r2, [pc, #48]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e52:	6153      	str	r3, [r2, #20]
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <EXTI15_10_IRQHandler+0xcc>)
 8000e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e58:	4798      	blx	r3
}
 8000e5a:	e00e      	b.n	8000e7a <EXTI15_10_IRQHandler+0xc2>
	else if(EXTI->PR & 1<<15){ EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d008      	beq.n	8000e7a <EXTI15_10_IRQHandler+0xc2>
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <EXTI15_10_IRQHandler+0xc8>)
 8000e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e72:	6153      	str	r3, [r2, #20]
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <EXTI15_10_IRQHandler+0xcc>)
 8000e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e78:	4798      	blx	r3
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40010400 	.word	0x40010400
 8000e84:	20000080 	.word	0x20000080

08000e88 <MCAL_RCC_GET_SYSCLK_Freq>:
 * =======================================================================================
 * 									APIS
 * =======================================================================================
 */
uint32_t MCAL_RCC_GET_SYSCLK_Freq()
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	00: HSI oscillator used as system clock
	01: HSE oscillator used as system clock
	10: PLL used as system clock
	11: not applicable
*/
	switch(((RCC->CFGR)>>2)& 0b11)
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MCAL_RCC_GET_SYSCLK_Freq+0x30>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	089b      	lsrs	r3, r3, #2
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d006      	beq.n	8000ea8 <MCAL_RCC_GET_SYSCLK_Freq+0x20>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d302      	bcc.n	8000ea4 <MCAL_RCC_GET_SYSCLK_Freq+0x1c>
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d004      	beq.n	8000eac <MCAL_RCC_GET_SYSCLK_Freq+0x24>
 8000ea2:	e005      	b.n	8000eb0 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
	{
	case 0:

		return HSI_RC_Clk ;
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <MCAL_RCC_GET_SYSCLK_Freq+0x34>)
 8000ea6:	e003      	b.n	8000eb0 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	case 1:

		//to do need to calculate  it //HSE User Should Specify it
		return HSE_Clock ;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <MCAL_RCC_GET_SYSCLK_Freq+0x38>)
 8000eaa:	e001      	b.n	8000eb0 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	case 2:

		//to do need to calculate  it PLLCLK and PLLMUL & PLL Source MUX
		return 16000000 ;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <MCAL_RCC_GET_SYSCLK_Freq+0x38>)
 8000eae:	e7ff      	b.n	8000eb0 <MCAL_RCC_GET_SYSCLK_Freq+0x28>
		break ;

	}
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	007a1200 	.word	0x007a1200
 8000ec0:	00f42400 	.word	0x00f42400

08000ec4 <MCAL_RCC_GET_PCLK1_Freq>:
uint32_t MCAL_RCC_GET_HCLK_Freq()
{
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> AHBPrescTable[(((RCC->CFGR)>>4)& 0xF)]);
}
uint32_t MCAL_RCC_GET_PCLK1_Freq()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> APBPrescTable[(((RCC->CFGR)>>8)& 0b111)]);
 8000ec8:	f7ff ffde 	bl	8000e88 <MCAL_RCC_GET_SYSCLK_Freq>
 8000ecc:	4601      	mov	r1, r0
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <MCAL_RCC_GET_PCLK1_Freq+0x20>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <MCAL_RCC_GET_PCLK1_Freq+0x24>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	080016fc 	.word	0x080016fc

08000eec <MCAL_RCC_GET_PCLK2_Freq>:
uint32_t MCAL_RCC_GET_PCLK2_Freq()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GET_SYSCLK_Freq()  >> APBPrescTable[(((RCC->CFGR)>>11)& 0b111)]);
 8000ef0:	f7ff ffca 	bl	8000e88 <MCAL_RCC_GET_SYSCLK_Freq>
 8000ef4:	4601      	mov	r1, r0
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <MCAL_RCC_GET_PCLK2_Freq+0x20>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	0adb      	lsrs	r3, r3, #11
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <MCAL_RCC_GET_PCLK2_Freq+0x24>)
 8000f02:	5cd3      	ldrb	r3, [r2, r3]
 8000f04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	080016fc 	.word	0x080016fc

08000f14 <TIMER_Enable>:
 * =======================================================================================
 * 							Generic Function
 * =======================================================================================
 */
void TIMER_Enable(TIMER_TypeDef* TIMERx)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	G_TIMERx = TIMERx;
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <TIMER_Enable+0x94>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]

	//Bit 4 DIR: Direction , 0: Counter used as up counter
	TIMERx->CR1 &= ~(1<<4);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 0210 	bic.w	r2, r3, #16
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]

	/*Bit 2 URS: Update request source
		1: Only counter overflow/underflow generates an update interrupt or DMA request if
		   enabled.
	*/
	TIMERx->CR1 |=(1<<2);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f043 0204 	orr.w	r2, r3, #4
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
	/*Bit 0 UG: Update generation
		This bit can be set by software, it is automatically cleared by hardware.
		0: No action
		1: Re-initialize the counter and generates an update of the registers
	*/
	TIMERx->EGR |=(1<<0);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	615a      	str	r2, [r3, #20]

	/*Bit 0 UIE: Update interrupt enable
		0: Update interrupt disabled.
		1: Update interrupt enabled.
	 */
	TIMERx->DIER |=(1<<0);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f043 0201 	orr.w	r2, r3, #1
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60da      	str	r2, [r3, #12]

	// Enable NVIC
	if(TIMERx == TIMER2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f58:	d106      	bne.n	8000f68 <TIMER_Enable+0x54>
	{
		NVIC_IRQ28_TIM2_ENABLE;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	; (8000fac <TIMER_Enable+0x98>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a13      	ldr	r2, [pc, #76]	; (8000fac <TIMER_Enable+0x98>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e014      	b.n	8000f92 <TIMER_Enable+0x7e>

	}else if(TIMERx == TIMER3)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a11      	ldr	r2, [pc, #68]	; (8000fb0 <TIMER_Enable+0x9c>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d106      	bne.n	8000f7e <TIMER_Enable+0x6a>
	{
		NVIC_IRQ29_TIM3_ENABLE;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <TIMER_Enable+0x98>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <TIMER_Enable+0x98>)
 8000f76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	e009      	b.n	8000f92 <TIMER_Enable+0x7e>

	}else if(TIMERx == TIMER4)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <TIMER_Enable+0xa0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d105      	bne.n	8000f92 <TIMER_Enable+0x7e>
	{
		NVIC_IRQ30_TIM4_ENABLE;
 8000f86:	4b09      	ldr	r3, [pc, #36]	; (8000fac <TIMER_Enable+0x98>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a08      	ldr	r2, [pc, #32]	; (8000fac <TIMER_Enable+0x98>)
 8000f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f90:	6013      	str	r3, [r2, #0]

	/*Bit 0 CEN: Counter enable
		0: Counter disabled
		1: Counter enabled
	*/
	TIMERx->CR1 |=(1<<0);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	200000c8 	.word	0x200000c8
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	40000400 	.word	0x40000400
 8000fb4:	40000800 	.word	0x40000800

08000fb8 <IRQ_Count_Time>:
	Delay_Flag = 1 ;

}

void IRQ_Count_Time(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	// Clear Bit 0 UIF: Update interrupt flag
	G_TIMERx->SR &= ~(1<<0);
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <IRQ_Count_Time+0x5c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	4b14      	ldr	r3, [pc, #80]	; (8001014 <IRQ_Count_Time+0x5c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	611a      	str	r2, [r3, #16]

	// Increment the overflow number
	if(G_TIMERx == TIMER2)
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <IRQ_Count_Time+0x5c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd4:	d105      	bne.n	8000fe2 <IRQ_Count_Time+0x2a>
	{
		OverFlow_Number[0]++;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <IRQ_Count_Time+0x60>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <IRQ_Count_Time+0x60>)
 8000fde:	6013      	str	r3, [r2, #0]
	}else if(G_TIMERx == TIMER4)
	{
		OverFlow_Number[2]++;
	}

}
 8000fe0:	e014      	b.n	800100c <IRQ_Count_Time+0x54>
	}else if(G_TIMERx == TIMER3)
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <IRQ_Count_Time+0x5c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	; (800101c <IRQ_Count_Time+0x64>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d105      	bne.n	8000ff8 <IRQ_Count_Time+0x40>
		OverFlow_Number[1]++;
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <IRQ_Count_Time+0x60>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <IRQ_Count_Time+0x60>)
 8000ff4:	6053      	str	r3, [r2, #4]
}
 8000ff6:	e009      	b.n	800100c <IRQ_Count_Time+0x54>
	}else if(G_TIMERx == TIMER4)
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <IRQ_Count_Time+0x5c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <IRQ_Count_Time+0x68>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d104      	bne.n	800100c <IRQ_Count_Time+0x54>
		OverFlow_Number[2]++;
 8001002:	4b05      	ldr	r3, [pc, #20]	; (8001018 <IRQ_Count_Time+0x60>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	3301      	adds	r3, #1
 8001008:	4a03      	ldr	r2, [pc, #12]	; (8001018 <IRQ_Count_Time+0x60>)
 800100a:	6093      	str	r3, [r2, #8]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	200000c8 	.word	0x200000c8
 8001018:	200000e8 	.word	0x200000e8
 800101c:	40000400 	.word	0x40000400
 8001020:	40000800 	.word	0x40000800

08001024 <MCAL_TIMER_Start_Stop_Calculate_Time>:
		1: Counter enabled
	*/
	TIMERx->CR1 &= ~(1<<0);
}
void MCAL_TIMER_Start_Stop_Calculate_Time(TIMER_TypeDef* TIMERx , Time_state_t state )
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	70fb      	strb	r3, [r7, #3]
	if(state == start)
 8001030:	78fb      	ldrb	r3, [r7, #3]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d11c      	bne.n	8001070 <MCAL_TIMER_Start_Stop_Calculate_Time+0x4c>
	{
		// Timer off
		TIMERx->CR1 &= ~(1<<0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f023 0201 	bic.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]


		//Set AAR_REG value  , PSC_REG value
		TIMERx->ARR = 65500;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
		TIMERx->PSC = 1 ;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	629a      	str	r2, [r3, #40]	; 0x28

		// Set IRQ Callback
		P_IRQ_CallBack_Fun = IRQ_Count_Time ;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MCAL_TIMER_Start_Stop_Calculate_Time+0x80>)
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <MCAL_TIMER_Start_Stop_Calculate_Time+0x84>)
 8001054:	601a      	str	r2, [r3, #0]

		// Reset overflow handler
		OverFlow_Number[0] = 0 ;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MCAL_TIMER_Start_Stop_Calculate_Time+0x88>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
		OverFlow_Number[1] = 0 ;
 800105c:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MCAL_TIMER_Start_Stop_Calculate_Time+0x88>)
 800105e:	2200      	movs	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
		OverFlow_Number[2] = 0 ;
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MCAL_TIMER_Start_Stop_Calculate_Time+0x88>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]

		// Enable Timer
		TIMER_Enable(TIMERx);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff53 	bl	8000f14 <TIMER_Enable>
		// Reset overflow handler
		OverFlow_Number[0] = 0 ;
		OverFlow_Number[1] = 0 ;
		OverFlow_Number[2] = 0 ;
	}
}
 800106e:	e014      	b.n	800109a <MCAL_TIMER_Start_Stop_Calculate_Time+0x76>
	else if(state == stop)
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d111      	bne.n	800109a <MCAL_TIMER_Start_Stop_Calculate_Time+0x76>
		TIMERx->CR1 &= ~(1<<0);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f023 0201 	bic.w	r2, r3, #1
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	601a      	str	r2, [r3, #0]
		TIMERx->CNT = 0 ;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
		OverFlow_Number[0] = 0 ;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MCAL_TIMER_Start_Stop_Calculate_Time+0x88>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
		OverFlow_Number[1] = 0 ;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MCAL_TIMER_Start_Stop_Calculate_Time+0x88>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
		OverFlow_Number[2] = 0 ;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <MCAL_TIMER_Start_Stop_Calculate_Time+0x88>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000d8 	.word	0x200000d8
 80010a8:	08000fb9 	.word	0x08000fb9
 80010ac:	200000e8 	.word	0x200000e8

080010b0 <MCAL_TIMER_Get_Time>:
uint32_t MCAL_TIMER_Get_Time(TIMER_TypeDef* TIMERx )
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	// Calculate Time
	uint32_t time ;
	if(G_TIMERx == TIMER2)
 80010b8:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MCAL_TIMER_Get_Time+0x78>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c0:	d10b      	bne.n	80010da <MCAL_TIMER_Get_Time+0x2a>
	{
		time = (((OverFlow_Number[0]*65500)+ TIMERx->CNT)/8);
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MCAL_TIMER_Get_Time+0x7c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80010ca:	fb02 f203 	mul.w	r2, r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	4413      	add	r3, r2
 80010d4:	08db      	lsrs	r3, r3, #3
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e020      	b.n	800111c <MCAL_TIMER_Get_Time+0x6c>

	}else if(G_TIMERx == TIMER3)
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MCAL_TIMER_Get_Time+0x78>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <MCAL_TIMER_Get_Time+0x80>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d10b      	bne.n	80010fc <MCAL_TIMER_Get_Time+0x4c>
	{
		time = (((OverFlow_Number[1]*65500)+ TIMERx->CNT)/8);
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MCAL_TIMER_Get_Time+0x7c>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 80010ec:	fb02 f203 	mul.w	r2, r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f4:	4413      	add	r3, r2
 80010f6:	08db      	lsrs	r3, r3, #3
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e00f      	b.n	800111c <MCAL_TIMER_Get_Time+0x6c>

	}else if(G_TIMERx == TIMER4)
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MCAL_TIMER_Get_Time+0x78>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0c      	ldr	r2, [pc, #48]	; (8001134 <MCAL_TIMER_Get_Time+0x84>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10a      	bne.n	800111c <MCAL_TIMER_Get_Time+0x6c>
	{
		time = (((OverFlow_Number[2]*65500)+ TIMERx->CNT)/8);
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MCAL_TIMER_Get_Time+0x7c>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 800110e:	fb02 f203 	mul.w	r2, r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001116:	4413      	add	r3, r2
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	60fb      	str	r3, [r7, #12]
	}

	return time ;
 800111c:	68fb      	ldr	r3, [r7, #12]

}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	200000c8 	.word	0x200000c8
 800112c:	200000e8 	.word	0x200000e8
 8001130:	40000400 	.word	0x40000400
 8001134:	40000800 	.word	0x40000800

08001138 <TIM2_IRQHandler>:
 * =======================================================================================
 * 									ISR
 * =======================================================================================
 */
void TIM2_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	P_IRQ_CallBack_Fun();
 800113c:	4b02      	ldr	r3, [pc, #8]	; (8001148 <TIM2_IRQHandler+0x10>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4798      	blx	r3
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000d8 	.word	0x200000d8

0800114c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	P_IRQ_CallBack_Fun();
 8001150:	4b02      	ldr	r3, [pc, #8]	; (800115c <TIM3_IRQHandler+0x10>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4798      	blx	r3
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000d8 	.word	0x200000d8

08001160 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	P_IRQ_CallBack_Fun();
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <TIM4_IRQHandler+0x10>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4798      	blx	r3
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200000d8 	.word	0x200000d8

08001174 <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler() {
 8001174:	b490      	push	{r4, r7}
 8001176:	af00      	add	r7, sp, #0
        // Clear the update interrupt flag
		TIMER1->SR &= ~(1 << 0);
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <TIM1_UP_IRQHandler+0x2c>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <TIM1_UP_IRQHandler+0x2c>)
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	6113      	str	r3, [r2, #16]
    	overflowTimsTIM1++;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <TIM1_UP_IRQHandler+0x30>)
 8001186:	e9d3 1200 	ldrd	r1, r2, [r3]
 800118a:	1c4b      	adds	r3, r1, #1
 800118c:	f142 0400 	adc.w	r4, r2, #0
 8001190:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <TIM1_UP_IRQHandler+0x30>)
 8001192:	e9c2 3400 	strd	r3, r4, [r2]
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc90      	pop	{r4, r7}
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40012c00 	.word	0x40012c00
 80011a4:	200000c0 	.word	0x200000c0

080011a8 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_PinConfig_t* UART_Config)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	uint32_t pclk ;

	//	enable the Clock for given USART peripheral
	if(USARTx == USART1)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a62      	ldr	r2, [pc, #392]	; (8001340 <MCAL_UART_Init+0x198>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d116      	bne.n	80011e8 <MCAL_UART_Init+0x40>
	{
		G_UART_Config[0].Payload_Length = UART_Config->Payload_Length ;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	7a1a      	ldrb	r2, [r3, #8]
 80011be:	4b61      	ldr	r3, [pc, #388]	; (8001344 <MCAL_UART_Init+0x19c>)
 80011c0:	721a      	strb	r2, [r3, #8]
		G_UART_Config[0].HwFlowCtl = UART_Config->HwFlowCtl ;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	7ada      	ldrb	r2, [r3, #11]
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <MCAL_UART_Init+0x19c>)
 80011c8:	72da      	strb	r2, [r3, #11]
		G_UART_Config[0].Parity = UART_Config->Parity ;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	7a5a      	ldrb	r2, [r3, #9]
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <MCAL_UART_Init+0x19c>)
 80011d0:	725a      	strb	r2, [r3, #9]
		G_UART_Config[0].P_IRQ_CallBack = UART_Config->P_IRQ_CallBack ;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	4a5b      	ldr	r2, [pc, #364]	; (8001344 <MCAL_UART_Init+0x19c>)
 80011d8:	6113      	str	r3, [r2, #16]
		RCC_USART1_CLK_EN();
 80011da:	4b5b      	ldr	r3, [pc, #364]	; (8001348 <MCAL_UART_Init+0x1a0>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <MCAL_UART_Init+0x1a0>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6193      	str	r3, [r2, #24]
 80011e6:	e037      	b.n	8001258 <MCAL_UART_Init+0xb0>

	}else if(USARTx == USART2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a58      	ldr	r2, [pc, #352]	; (800134c <MCAL_UART_Init+0x1a4>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d116      	bne.n	800121e <MCAL_UART_Init+0x76>
	{
		G_UART_Config[1].Payload_Length = UART_Config->Payload_Length ;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	7a1a      	ldrb	r2, [r3, #8]
 80011f4:	4b53      	ldr	r3, [pc, #332]	; (8001344 <MCAL_UART_Init+0x19c>)
 80011f6:	771a      	strb	r2, [r3, #28]
		G_UART_Config[1].HwFlowCtl = UART_Config->HwFlowCtl ;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	7ada      	ldrb	r2, [r3, #11]
 80011fc:	4b51      	ldr	r3, [pc, #324]	; (8001344 <MCAL_UART_Init+0x19c>)
 80011fe:	77da      	strb	r2, [r3, #31]
		G_UART_Config[1].Parity = UART_Config->Parity ;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	7a5a      	ldrb	r2, [r3, #9]
 8001204:	4b4f      	ldr	r3, [pc, #316]	; (8001344 <MCAL_UART_Init+0x19c>)
 8001206:	775a      	strb	r2, [r3, #29]
		G_UART_Config[1].P_IRQ_CallBack = UART_Config->P_IRQ_CallBack ;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <MCAL_UART_Init+0x19c>)
 800120e:	6253      	str	r3, [r2, #36]	; 0x24
		RCC_USART2_CLK_EN();
 8001210:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <MCAL_UART_Init+0x1a0>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <MCAL_UART_Init+0x1a0>)
 8001216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121a:	61d3      	str	r3, [r2, #28]
 800121c:	e01c      	b.n	8001258 <MCAL_UART_Init+0xb0>

	}else if(USARTx == USART3)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4b      	ldr	r2, [pc, #300]	; (8001350 <MCAL_UART_Init+0x1a8>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d118      	bne.n	8001258 <MCAL_UART_Init+0xb0>
	{
		G_UART_Config[2].Payload_Length = UART_Config->Payload_Length ;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	7a1a      	ldrb	r2, [r3, #8]
 800122a:	4b46      	ldr	r3, [pc, #280]	; (8001344 <MCAL_UART_Init+0x19c>)
 800122c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		G_UART_Config[2].HwFlowCtl = UART_Config->HwFlowCtl ;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	7ada      	ldrb	r2, [r3, #11]
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <MCAL_UART_Init+0x19c>)
 8001236:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		G_UART_Config[2].Parity = UART_Config->Parity ;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	7a5a      	ldrb	r2, [r3, #9]
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <MCAL_UART_Init+0x19c>)
 8001240:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		G_UART_Config[2].P_IRQ_CallBack = UART_Config->P_IRQ_CallBack ;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	4a3e      	ldr	r2, [pc, #248]	; (8001344 <MCAL_UART_Init+0x19c>)
 800124a:	6393      	str	r3, [r2, #56]	; 0x38
		RCC_USART3_CLK_EN();
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <MCAL_UART_Init+0x1a0>)
 800124e:	69db      	ldr	r3, [r3, #28]
 8001250:	4a3d      	ldr	r2, [pc, #244]	; (8001348 <MCAL_UART_Init+0x1a0>)
 8001252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001256:	61d3      	str	r3, [r2, #28]
	}

	//  Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= (1<<13);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	60da      	str	r2, [r3, #12]

	//	Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->Mode ;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	7812      	ldrb	r2, [r2, #0]
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	60da      	str	r2, [r3, #12]

	// PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	7a12      	ldrb	r2, [r2, #8]
 800127a:	431a      	orrs	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	7a52      	ldrb	r2, [r2, #9]
 8001288:	431a      	orrs	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	7a92      	ldrb	r2, [r2, #10]
 8001296:	431a      	orrs	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	611a      	str	r2, [r3, #16]

	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	7ad2      	ldrb	r2, [r2, #11]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	615a      	str	r2, [r3, #20]

	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a24      	ldr	r2, [pc, #144]	; (8001340 <MCAL_UART_Init+0x198>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d103      	bne.n	80012ba <MCAL_UART_Init+0x112>
	{
		pclk = MCAL_RCC_GET_PCLK1_Freq();
 80012b2:	f7ff fe07 	bl	8000ec4 <MCAL_RCC_GET_PCLK1_Freq>
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	e002      	b.n	80012c0 <MCAL_UART_Init+0x118>
	}
	else
	{
		pclk = MCAL_RCC_GET_PCLK2_Freq();
 80012ba:	f7ff fe17 	bl	8000eec <MCAL_RCC_GET_PCLK2_Freq>
 80012be:	60f8      	str	r0, [r7, #12]
	}

	USARTx->BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	011a      	lsls	r2, r3, #4
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	68f9      	ldr	r1, [r7, #12]
 80012d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d8:	f003 030f 	and.w	r3, r3, #15
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	609a      	str	r2, [r3, #8]

	//ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d026      	beq.n	8001338 <MCAL_UART_Init+0x190>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	7b12      	ldrb	r2, [r2, #12]
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a11      	ldr	r2, [pc, #68]	; (8001340 <MCAL_UART_Init+0x198>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d106      	bne.n	800130e <MCAL_UART_Init+0x166>
			NVIC_IRQ37_USART1_ENABLE ;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MCAL_UART_Init+0x1ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a13      	ldr	r2, [pc, #76]	; (8001354 <MCAL_UART_Init+0x1ac>)
 8001306:	f043 0320 	orr.w	r3, r3, #32
 800130a:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_ENABLE ;

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_ENABLE ;
	}
}
 800130c:	e014      	b.n	8001338 <MCAL_UART_Init+0x190>
		else if ( USARTx == USART2 )
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a0e      	ldr	r2, [pc, #56]	; (800134c <MCAL_UART_Init+0x1a4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d106      	bne.n	8001324 <MCAL_UART_Init+0x17c>
			NVIC_IRQ38_USART2_ENABLE ;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MCAL_UART_Init+0x1ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <MCAL_UART_Init+0x1ac>)
 800131c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001320:	6013      	str	r3, [r2, #0]
}
 8001322:	e009      	b.n	8001338 <MCAL_UART_Init+0x190>
		else if ( USARTx == USART3 )
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <MCAL_UART_Init+0x1a8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d105      	bne.n	8001338 <MCAL_UART_Init+0x190>
			NVIC_IRQ39_USART3_ENABLE ;
 800132c:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MCAL_UART_Init+0x1ac>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a08      	ldr	r2, [pc, #32]	; (8001354 <MCAL_UART_Init+0x1ac>)
 8001332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013800 	.word	0x40013800
 8001344:	200000f4 	.word	0x200000f4
 8001348:	40021000 	.word	0x40021000
 800134c:	40004400 	.word	0x40004400
 8001350:	40004800 	.word	0x40004800
 8001354:	e000e104 	.word	0xe000e104

08001358 <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a29      	ldr	r2, [pc, #164]	; (8001408 <MCAL_UART_GPIO_Set_Pins+0xb0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d116      	bne.n	8001396 <MCAL_UART_GPIO_Set_Pins+0x3e>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8001368:	2309      	movs	r3, #9
 800136a:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 800136c:	2306      	movs	r3, #6
 800136e:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8001370:	2301      	movs	r3, #1
 8001372:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4619      	mov	r1, r3
 800137a:	4824      	ldr	r0, [pc, #144]	; (800140c <MCAL_UART_GPIO_Set_Pins+0xb4>)
 800137c:	f000 f8e2 	bl	8001544 <MCAL_GPIO_Init>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8001380:	230a      	movs	r3, #10
 8001382:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 8001384:	2308      	movs	r3, #8
 8001386:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	481f      	ldr	r0, [pc, #124]	; (800140c <MCAL_UART_GPIO_Set_Pins+0xb4>)
 8001390:	f000 f8d8 	bl	8001544 <MCAL_GPIO_Init>
			PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &PinCfg);

		}
	}
}
 8001394:	e034      	b.n	8001400 <MCAL_UART_GPIO_Set_Pins+0xa8>
	else if ( USARTx == USART2 )
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d116      	bne.n	80013cc <MCAL_UART_GPIO_Set_Pins+0x74>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800139e:	2302      	movs	r3, #2
 80013a0:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80013a2:	2306      	movs	r3, #6
 80013a4:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80013a6:	2301      	movs	r3, #1
 80013a8:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	4816      	ldr	r0, [pc, #88]	; (800140c <MCAL_UART_GPIO_Set_Pins+0xb4>)
 80013b2:	f000 f8c7 	bl	8001544 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80013b6:	2303      	movs	r3, #3
 80013b8:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80013ba:	2308      	movs	r3, #8
 80013bc:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOA, &PinCfg);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	; (800140c <MCAL_UART_GPIO_Set_Pins+0xb4>)
 80013c6:	f000 f8bd 	bl	8001544 <MCAL_GPIO_Init>
}
 80013ca:	e019      	b.n	8001400 <MCAL_UART_GPIO_Set_Pins+0xa8>
	else if ( USARTx == USART3 )
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d115      	bne.n	8001400 <MCAL_UART_GPIO_Set_Pins+0xa8>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 80013d4:	230a      	movs	r3, #10
 80013d6:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_OUTPUT_AF_PP;
 80013d8:	2306      	movs	r3, #6
 80013da:	737b      	strb	r3, [r7, #13]
		PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80013dc:	2301      	movs	r3, #1
 80013de:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80013e8:	f000 f8ac 	bl	8001544 <MCAL_GPIO_Init>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 80013ec:	230b      	movs	r3, #11
 80013ee:	733b      	strb	r3, [r7, #12]
		PinCfg.GPIO_Mode = GPIO_MODE_AF_INPUT;
 80013f0:	2308      	movs	r3, #8
 80013f2:	737b      	strb	r3, [r7, #13]
		MCAL_GPIO_Init(GPIOB, &PinCfg);
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4619      	mov	r1, r3
 80013fa:	4807      	ldr	r0, [pc, #28]	; (8001418 <MCAL_UART_GPIO_Set_Pins+0xc0>)
 80013fc:	f000 f8a2 	bl	8001544 <MCAL_GPIO_Init>
}
 8001400:	bf00      	nop
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40013800 	.word	0x40013800
 800140c:	40010800 	.word	0x40010800
 8001410:	40004400 	.word	0x40004400
 8001414:	40004800 	.word	0x40004800
 8001418:	40010c00 	.word	0x40010c00

0800141c <MCAL_UART_ReceiveData>:
			//			When receiving with the parity enabled, the value read in the MSB bit is the received parity
			//			bit

 */
void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint16_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	60f8      	str	r0, [r7, #12]
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	4613      	mov	r3, r2
 8001428:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE(Read data register not empty) flag is set in the SR
	if (PollingEn == enable)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <MCAL_UART_ReceiveData+0x22>
		while( ! (USARTx->SR & 1<<5 ));
 8001430:	bf00      	nop
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f9      	beq.n	8001432 <MCAL_UART_ReceiveData+0x16>

	//Check the USART_WordLength item for 9BIT or 8BIT in a frame
	if ( USARTx == USART1 )
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a2d      	ldr	r2, [pc, #180]	; (80014f8 <MCAL_UART_ReceiveData+0xdc>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d118      	bne.n	8001478 <MCAL_UART_ReceiveData+0x5c>
			{
				//Parity is used, so, 8bits will be of user data and 1 bit is parity
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0xFF );
			}

		}else if (G_UART_Config[0].Payload_Length == UART_Payload_Length_8B)
 8001446:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <MCAL_UART_ReceiveData+0xe0>)
 8001448:	7a1b      	ldrb	r3, [r3, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d14f      	bne.n	80014ee <MCAL_UART_ReceiveData+0xd2>
		{
			if(G_UART_Config[0].Parity == UART_Parity__NONE)
 800144e:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <MCAL_UART_ReceiveData+0xe0>)
 8001450:	7a5b      	ldrb	r3, [r3, #9]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d107      	bne.n	8001466 <MCAL_UART_ReceiveData+0x4a>
			{
				//no parity So all 8bit are considered data
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2db      	uxtb	r3, r3
 800145e:	b29a      	uxth	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	801a      	strh	r2, [r3, #0]
			}
		}

	}

}
 8001464:	e043      	b.n	80014ee <MCAL_UART_ReceiveData+0xd2>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	b29b      	uxth	r3, r3
 800146c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001470:	b29a      	uxth	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	801a      	strh	r2, [r3, #0]
}
 8001476:	e03a      	b.n	80014ee <MCAL_UART_ReceiveData+0xd2>
	else if ( USARTx == USART2 )
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4a21      	ldr	r2, [pc, #132]	; (8001500 <MCAL_UART_ReceiveData+0xe4>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d118      	bne.n	80014b2 <MCAL_UART_ReceiveData+0x96>
		}else if (G_UART_Config[1].Payload_Length == UART_Payload_Length_8B)
 8001480:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <MCAL_UART_ReceiveData+0xe0>)
 8001482:	7f1b      	ldrb	r3, [r3, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d132      	bne.n	80014ee <MCAL_UART_ReceiveData+0xd2>
			if(G_UART_Config[1].Parity == UART_Parity__NONE)
 8001488:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <MCAL_UART_ReceiveData+0xe0>)
 800148a:	7f5b      	ldrb	r3, [r3, #29]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <MCAL_UART_ReceiveData+0x84>
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	b29b      	uxth	r3, r3
 8001496:	b2db      	uxtb	r3, r3
 8001498:	b29a      	uxth	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	801a      	strh	r2, [r3, #0]
}
 800149e:	e026      	b.n	80014ee <MCAL_UART_ReceiveData+0xd2>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	801a      	strh	r2, [r3, #0]
}
 80014b0:	e01d      	b.n	80014ee <MCAL_UART_ReceiveData+0xd2>
	else if ( USARTx == USART3 )
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <MCAL_UART_ReceiveData+0xe8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d119      	bne.n	80014ee <MCAL_UART_ReceiveData+0xd2>
		}else if (G_UART_Config[2].Payload_Length == UART_Payload_Length_8B)
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MCAL_UART_ReceiveData+0xe0>)
 80014bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d114      	bne.n	80014ee <MCAL_UART_ReceiveData+0xd2>
			if(G_UART_Config[2].Parity == UART_Parity__NONE)
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <MCAL_UART_ReceiveData+0xe0>)
 80014c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d107      	bne.n	80014de <MCAL_UART_ReceiveData+0xc2>
				*pRxBuffer = (uint16_t)(USARTx->DR & 0xFF);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	801a      	strh	r2, [r3, #0]
}
 80014dc:	e007      	b.n	80014ee <MCAL_UART_ReceiveData+0xd2>
				*pRxBuffer = (uint16_t)( USARTx->DR  & (uint8_t)0x7F );
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	801a      	strh	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40013800 	.word	0x40013800
 80014fc:	200000f4 	.word	0x200000f4
 8001500:	40004400 	.word	0x40004400
 8001504:	40004800 	.word	0x40004800

08001508 <USART1_IRQHandler>:
}


//ISR
void USART1_IRQHandler (void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

	G_UART_Config[0].P_IRQ_CallBack () ;
 800150c:	4b02      	ldr	r3, [pc, #8]	; (8001518 <USART1_IRQHandler+0x10>)
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	4798      	blx	r3

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000f4 	.word	0x200000f4

0800151c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	G_UART_Config[1].P_IRQ_CallBack () ;
 8001520:	4b02      	ldr	r3, [pc, #8]	; (800152c <USART2_IRQHandler+0x10>)
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	4798      	blx	r3

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200000f4 	.word	0x200000f4

08001530 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	G_UART_Config[2].P_IRQ_CallBack () ;
 8001534:	4b02      	ldr	r3, [pc, #8]	; (8001540 <USART3_IRQHandler+0x10>)
 8001536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001538:	4798      	blx	r3


}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000f4 	.word	0x200000f4

08001544 <MCAL_GPIO_Init>:
 * @retval 		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOX ,  GPIO_PinConfig_t *PinConfig)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* configregister ;
	uint8_t PIN_Config = 0 ;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]

	configregister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH ;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b07      	cmp	r3, #7
 8001558:	d801      	bhi.n	800155e <MCAL_GPIO_Init+0x1a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	e001      	b.n	8001562 <MCAL_GPIO_Init+0x1e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3304      	adds	r3, #4
 8001562:	613b      	str	r3, [r7, #16]

	//Get the position of configuration pins in CRL or CRH
	// CRL (position = pin number * 4)
	// CRH (position = (pinNumber-8)*4)
	uint8_t CRLH_Position;
	CRLH_Position = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? (PinConfig->GPIO_PinNumber * 4): ((PinConfig->GPIO_PinNumber -8) * 4) ;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b07      	cmp	r3, #7
 800156a:	d804      	bhi.n	8001576 <MCAL_GPIO_Init+0x32>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	e005      	b.n	8001582 <MCAL_GPIO_Init+0x3e>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	3338      	adds	r3, #56	; 0x38
 800157c:	b2db      	uxtb	r3, r3
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	b2db      	uxtb	r3, r3
 8001582:	73fb      	strb	r3, [r7, #15]

	//clear CNF8[1:0] MODE8[1:0]
	(*configregister) &= ~(0xf << CRLH_Position);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	7bfa      	ldrb	r2, [r7, #15]
 800158a:	210f      	movs	r1, #15
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	43d2      	mvns	r2, r2
 8001592:	401a      	ands	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	601a      	str	r2, [r3, #0]

	//if the pin is output
	if((PinConfig->GPIO_Mode > GPIO_MODE_INPUT_PD) && (PinConfig->GPIO_Mode != GPIO_MODE_AF_INPUT))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d912      	bls.n	80015c6 <MCAL_GPIO_Init+0x82>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d00e      	beq.n	80015c6 <MCAL_GPIO_Init+0x82>
	{
		//Set  CNF8[1:0] MODE8[1:0]
		PIN_Config = ((((PinConfig->GPIO_Mode - 4)<<2)|(PinConfig->GPIO_Output_Speed)) & 0x0f);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	785b      	ldrb	r3, [r3, #1]
 80015ac:	3b04      	subs	r3, #4
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	b25a      	sxtb	r2, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	75fb      	strb	r3, [r7, #23]
 80015c4:	e032      	b.n	800162c <MCAL_GPIO_Init+0xe8>
	}
	//else the pin is input
	else
	{
		if((PinConfig->GPIO_Mode == GPIO_MODE_Analog)||(PinConfig->GPIO_Mode == GPIO_MODE_INPUT_FLO))
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	785b      	ldrb	r3, [r3, #1]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <MCAL_GPIO_Init+0x92>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	785b      	ldrb	r3, [r3, #1]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <MCAL_GPIO_Init+0xa2>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((PinConfig->GPIO_Mode)<<2)|0x0) & 0x0f);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	785b      	ldrb	r3, [r3, #1]
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	75fb      	strb	r3, [r7, #23]
 80015e4:	e022      	b.n	800162c <MCAL_GPIO_Init+0xe8>
		}
		else if ((PinConfig->GPIO_Mode == GPIO_MODE_AF_INPUT))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d102      	bne.n	80015f4 <MCAL_GPIO_Init+0xb0>
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_FLO)<<2)|0x0) & 0x0f);
 80015ee:	2304      	movs	r3, #4
 80015f0:	75fb      	strb	r3, [r7, #23]
 80015f2:	e01b      	b.n	800162c <MCAL_GPIO_Init+0xe8>
		}
		else //PU PD Input
		{
			//Set  CNF8[1:0] MODE8[1:0]00
			PIN_Config = ((((GPIO_MODE_INPUT_PU)<<2)|0x0) & 0x0f);
 80015f4:	2308      	movs	r3, #8
 80015f6:	75fb      	strb	r3, [r7, #23]

			if (PinConfig->GPIO_Mode == GPIO_MODE_INPUT_PU)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	785b      	ldrb	r3, [r3, #1]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d10a      	bne.n	8001616 <MCAL_GPIO_Init+0xd2>
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOX->ODR |= (1<<PinConfig->GPIO_PinNumber);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	7812      	ldrb	r2, [r2, #0]
 8001608:	4611      	mov	r1, r2
 800160a:	2201      	movs	r2, #1
 800160c:	408a      	lsls	r2, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	e00a      	b.n	800162c <MCAL_GPIO_Init+0xe8>
			}
			else
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOX->ODR &= ~(1<<PinConfig->GPIO_PinNumber);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4611      	mov	r1, r2
 8001620:	2201      	movs	r2, #1
 8001622:	408a      	lsls	r2, r1
 8001624:	43d2      	mvns	r2, r2
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL or CRH
	(*configregister) |=  ( (PIN_Config) << CRLH_Position);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	7df9      	ldrb	r1, [r7, #23]
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	431a      	orrs	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]

}
 800163e:	bf00      	nop
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <MCAL_GPIO_WritePin>:
 *@param [in] 			-Value: Pin Value
 * @retval 				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin (GPIO_TypeDef *GPIOX,uint8_t PinNumber , uint8_t Value)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
 8001654:	4613      	mov	r3, r2
 8001656:	70bb      	strb	r3, [r7, #2]
	if(Value != GPIO_PIN_RESET)
 8001658:	78bb      	ldrb	r3, [r7, #2]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <MCAL_GPIO_WritePin+0x2a>
	{
		GPIOX->ODR |= (1<<PinNumber);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	78fa      	ldrb	r2, [r7, #3]
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]
	else
	{
		GPIOX->ODR &= ~(1<<PinNumber);
	}

}
 8001670:	e009      	b.n	8001686 <MCAL_GPIO_WritePin+0x3e>
		GPIOX->ODR &= ~(1<<PinNumber);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	2101      	movs	r1, #1
 800167a:	fa01 f202 	lsl.w	r2, r1, r2
 800167e:	43d2      	mvns	r2, r2
 8001680:	401a      	ands	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60da      	str	r2, [r3, #12]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <__libc_init_array>:
 8001690:	b570      	push	{r4, r5, r6, lr}
 8001692:	2500      	movs	r5, #0
 8001694:	4e0c      	ldr	r6, [pc, #48]	; (80016c8 <__libc_init_array+0x38>)
 8001696:	4c0d      	ldr	r4, [pc, #52]	; (80016cc <__libc_init_array+0x3c>)
 8001698:	1ba4      	subs	r4, r4, r6
 800169a:	10a4      	asrs	r4, r4, #2
 800169c:	42a5      	cmp	r5, r4
 800169e:	d109      	bne.n	80016b4 <__libc_init_array+0x24>
 80016a0:	f000 f81a 	bl	80016d8 <_init>
 80016a4:	2500      	movs	r5, #0
 80016a6:	4e0a      	ldr	r6, [pc, #40]	; (80016d0 <__libc_init_array+0x40>)
 80016a8:	4c0a      	ldr	r4, [pc, #40]	; (80016d4 <__libc_init_array+0x44>)
 80016aa:	1ba4      	subs	r4, r4, r6
 80016ac:	10a4      	asrs	r4, r4, #2
 80016ae:	42a5      	cmp	r5, r4
 80016b0:	d105      	bne.n	80016be <__libc_init_array+0x2e>
 80016b2:	bd70      	pop	{r4, r5, r6, pc}
 80016b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016b8:	4798      	blx	r3
 80016ba:	3501      	adds	r5, #1
 80016bc:	e7ee      	b.n	800169c <__libc_init_array+0xc>
 80016be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016c2:	4798      	blx	r3
 80016c4:	3501      	adds	r5, #1
 80016c6:	e7f2      	b.n	80016ae <__libc_init_array+0x1e>
 80016c8:	08001704 	.word	0x08001704
 80016cc:	08001704 	.word	0x08001704
 80016d0:	08001704 	.word	0x08001704
 80016d4:	08001708 	.word	0x08001708

080016d8 <_init>:
 80016d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016da:	bf00      	nop
 80016dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016de:	bc08      	pop	{r3}
 80016e0:	469e      	mov	lr, r3
 80016e2:	4770      	bx	lr

080016e4 <_fini>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr
